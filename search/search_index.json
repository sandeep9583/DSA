{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Data Engineering and DSA","text":""},{"location":"index.html#data-engineering-and-dsa","title":"Data Engineering and DSA","text":"<p>This is website for Data Engineering and DSA preparation</p>"},{"location":"DSA/code.html","title":"code","text":""},{"location":"DSA/code.html#code","title":"code","text":""},{"location":"DSA/code.html#week1","title":"Week1","text":"<ol> <li>Arrays &amp; Hashing: Contains Duplicate, Valid Anagram, Two Sum</li> <li>Pointers: Valid Palindrome, Two Sum II Input Array Is Sorted</li> <li>Sliding Window: Best Time to Buy And Sell Stock, Longest Substring Without Repeating Characters</li> <li>Stack: Valid Parentheses, Min Stack</li> <li>Binary Search: Binary Search, Search a 2D Matrix</li> <li>LinkedList: Reverse Linked List, Merge Two Sorted Lists</li> <li>Trees: Invert Binary Tree, Maximum Depth of Binary Tree</li> </ol>"},{"location":"DSA/code.html#contains-duplicate","title":"Contains Duplicate","text":"<pre><code>def containsDuplicate(self, nums: List[int]) -&gt; bool:\n        array_set = {}\n        for i in nums:\n            if(i in array_set):\n                return true\n            array_set.add(i)\n        return false\n</code></pre>"},{"location":"DSA/code.html#valid-anagram","title":"Valid Anagram","text":"<pre><code>def isAnagram(self, s: str, t: str) -&gt; bool:\n        if len(s) != len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i],0)+1\n            t_dict[t[i]] = t_dict.get(t[i],0)+1\n        return s_dict==t_dict\n</code></pre>"},{"location":"DSA/code.html#two-sum","title":"Two Sum","text":"<pre><code>def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        hashmap = {}\n        for i, num in enumerate(nums):\n            diff = target - num\n            if diff in hashmap:\n                return [hashmap[diff],i]\n            hashmap[num] = i\n        return [-1,-1]\n</code></pre>"},{"location":"DSA/code.html#valid-palindrome","title":"Valid Palindrome","text":"<pre><code>def isPalindrome(self, s: str) -&gt; bool:\n        left, right = 0, len(s) - 1\n        while(left &lt; right):\n            while(left&lt;right and not s[left].isalnum()):\n                left +=1\n            while(left&lt;right and not s[right].isalnum()):\n                right -=1\n            if(s[left].lower() != s[right].lower()):\n                return False\n            right -=1\n            left +=1\n        return True\n</code></pre>"},{"location":"DSA/code.html#two-sum-ii-input-array-is-sorted","title":"Two Sum II Input Array Is Sorted","text":"<pre><code>def twoSum(self, numbers: List[int], target: int) -&gt; List[int]:\n        left,right = 0, len(numbers) -1\n        while( left &lt; right):\n            if((numbers[left] + numbers[right])==target):\n                return [left+1,right+1]\n            elif((numbers[left] + numbers[right])&lt;target):\n                left+=1\n            else:\n                right-=1\n        return [-1,-1]\n</code></pre>"},{"location":"DSA/code.html#best-time-to-buy-and-sell-stock","title":"Best Time to Buy And Sell Stock","text":"<pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n        minprice = prices[0]\n        maxprofit =0\n        for price in prices:\n            minprice = min(price,minprice)\n            profit = price- minprice\n            maxprofit = max(profit,maxprofit)\n        return maxprofit\n</code></pre>"},{"location":"DSA/code.html#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"<pre><code>def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        hashset = set()\n        left = 0\n        maxlength = 0\n        for right in range(len(s)):\n            while(s[right] in hashset):\n                hashset.remove(s[left])\n                left+=1\n            hashset.add(s[right])\n            maxlength = max(right-left+1,maxlength)\n        return maxlength\n</code></pre>"},{"location":"DSA/code.html#valid-parentheses","title":"Valid Parentheses","text":"<pre><code>def isValid(self, s: str) -&gt; bool:\n        mapping = {'}':'{',\"]\":\"[\",\")\":\"(\"}\n        stack =[]\n        for char in s:\n            if char in mapping:\n                topelement = stack.pop() if stack else \"#\"\n                if mapping[char] != topelement:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n</code></pre>"},{"location":"DSA/code.html#min-stack","title":"Min Stack","text":"<pre><code>class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.minstack = []\n\n\n    def push(self, val: int) -&gt; None:\n        self.stack.append(val)\n        if(not self.minstack or val&lt;=self.minstack[-1]):\n            self.minstack.append(val)\n\n\n    def pop(self) -&gt; None:\n        val = self.stack.pop()\n        if(val==self.minstack[-1]):\n            self.minstack.pop()\n\n\n    def top(self) -&gt; int:\n        return self.stack[-1]\n\n\n    def getMin(self) -&gt; int:\n        return self.minstack[-1]\n</code></pre>"},{"location":"DSA/code.html#binary-search","title":"Binary Search","text":"<pre><code>def search(self, nums: List[int], target: int) -&gt; int:\n        left,right = 0, len(nums) -1\n        while(left &lt;= right):\n            mid = (left+right) // 2\n            if(nums[mid] == target):\n                return mid\n            elif nums[mid] &gt; target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n</code></pre>"},{"location":"DSA/code.html#search-a-2d-matrix","title":"Search a 2D Matrix","text":"<pre><code> def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        top, bottom = 0, len(matrix) -1\n        while(top&lt;=bottom):\n            row = (top+bottom)//2\n            if(target&lt;matrix[row][0]):\n                bottom = row -1\n            elif(target&gt;matrix[row][-1]):\n                top = row +1\n            else:\n                break\n        if(not top&lt;=bottom):\n            return False\n        row = (top+bottom)//2\n        left, right = 0, len(matrix[row]) -1\n        while(left&lt;=right):\n            mid =  (left+right)//2\n            if(target == matrix[row][mid]):\n                return True\n            elif(target&lt;matrix[row][mid]):\n                right = mid-1\n            else:\n                left = mid+1\n        return False\n</code></pre>"},{"location":"DSA/code.html#reverse-linked-list","title":"Reverse Linked List","text":"<pre><code>def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prev = None\n        curr = head\n        while(curr):\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        return prev\n</code></pre>"},{"location":"DSA/code.html#merge-two-sorted-lists","title":"Merge Two Sorted Lists","text":"<pre><code>def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prevhead = ListNode(-1)\n        curr  = prevhead\n        while(list1 and list2):\n            if(list1.val&lt;=list2.val):\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        curr.next = list1 if list1 else list2\n        return prevhead.next\n</code></pre>"},{"location":"DSA/code.html#invert-binary-tree","title":"Invert Binary Tree","text":"<pre><code>def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:\n         if not root:\n             return None\n         root.left,root.right = root.right,root.left\n         self.invertTree(root.left)\n         self.invertTree(root.right)\n         return root\n</code></pre> <pre><code>from collections import deque\n def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:\n        if not root:\n            return None\n        queue = deque([root])\n        while queue:\n            current = queue.popleft()\n            current.left,current.right = current.right, current.left\n            if current.left:\n                queue.append(current.left)\n            if current.right:\n                queue.append(current.right)\n        return root\n</code></pre>"},{"location":"DSA/code.html#maximum-depth-of-binary-tree","title":"Maximum Depth of Binary Tree","text":"<pre><code>def maxDepth(self, root: Optional[TreeNode]) -&gt; int:\n        if not root:\n            return 0\n        leftdepth = self.maxDepth(root.left)\n        rightdepth = self.maxDepth(root.right)\n        return max(leftdepth,rightdepth)+1\n</code></pre> <pre><code>from collections import deque\ndef maxDepth(self, root: Optional[TreeNode]) -&gt; int:\n        if not root:\n            return 0\n        queue = deque([root])\n        depth = 0\n        while queue:\n            depth += 1\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                if current.left:\n                    queue.append(current.left)\n                if current.right:\n                    queue.append(current.right)\n        return depth\n</code></pre>"},{"location":"SQL/1.introduction.html","title":"1.Introduction","text":""},{"location":"SQL/1.introduction.html#1introduction","title":"1.Introduction","text":""},{"location":"SQL/1.introduction.html#database-types","title":"Database Types","text":"<p>A database is a structured collection of data organized in a way that allows for efficient storage, retrieval, and manipulation of that data. Databases play a crucial role in modern computing, providing a systematic and organized approach to managing and storing information. They are used in various applications, ranging from simple tasks like storing contact information to complex systems handling large volumes of data in enterprises.</p>"},{"location":"SQL/1.introduction.html#relational-databases-rdbms","title":"Relational Databases (RDBMS)","text":"<ul> <li>Examples: MySQL, PostgreSQL, Oracle, Microsoft SQL Server</li> <li>Structure: Data is organized into tables with rows and columns.</li> <li>Relationships: Tables can be related through keys (primary and foreign keys).</li> <li>Use: Suitable for structured and tabular data.</li> </ul>"},{"location":"SQL/1.introduction.html#nosql-databases","title":"NoSQL Databases","text":"<ul> <li>Examples: MongoDB, Cassandra, Redis</li> <li>Structure: Data is stored in a non-tabular format, such as key-value pairs, documents, or graphs.</li> <li>Use: Suitable for unstructured or semi-structured data, and when scalability and flexibility are essential.</li> </ul>"},{"location":"SQL/1.introduction.html#object-oriented-databasesmkdocs","title":"Object-Oriented Databasesmkdocs","text":"<ul> <li>Examples: db4o, ObjectDB</li> <li>Structure: Data is stored in the form of objects, similar to object-oriented programming.</li> <li>Use: Suitable for applications with complex data structures and strong ties to object-oriented programming languages.</li> </ul>"},{"location":"SQL/1.introduction.html#graph-databases","title":"Graph Databases","text":"<ul> <li>Examples: Neo4j, Amazon Neptune</li> <li>Structure: Data is represented as nodes, edges, and properties, making it ideal for managing relationships.</li> <li>Use: Effective for scenarios where relationships between entities are crucial, such as social networks and network analysis.</li> </ul>"},{"location":"SQL/1.introduction.html#document-stores","title":"Document Stores","text":"<ul> <li>Examples: CouchDB, Elasticsearch</li> <li>Structure: Data is stored as documents, usually in JSON or XML format.</li> <li>Use: Suitable for semi-structured or hierarchical data, and often used in content management systems.</li> </ul>"},{"location":"SQL/1.introduction.html#in-memory-databases","title":"In-Memory Databases","text":"<ul> <li>Examples: Redis, Memcached</li> <li>Structure: Data is stored in memory rather than on disk, allowing for faster data retrieval.</li> <li>Use: Ideal for applications that require low-latency access to frequently accessed data.</li> </ul>"},{"location":"SQL/1.introduction.html#time-series-databases","title":"Time-Series Databases","text":"<ul> <li>Examples: InfluxDB, Prometheus</li> <li>Structure: Optimized for storing and retrieving time-series data, such as IoT sensor data and system metrics.</li> <li>Use: Suitable for applications where data points are timestamped and queried over time.</li> </ul> <p>Choosing the right type of database depends on the specific requirements of your application, including the nature of your data, performance needs, scalability, and the complexity of relationships within the data.</p> <p>Database (DB), Database Management System (DBMS), and Relational Database Management System (RDBMS) are related concepts but refer to different aspects of managing and organizing data.</p>"},{"location":"SQL/1.introduction.html#database-db-vs-dbms-vs-rdms","title":"Database (DB) vs DBMS vs RDMS:","text":"<p>Database: A database is like a digital library where information is neatly organized and stored on a computer. It's a place where we keep all kinds of things, from simple written notes to pictures and videos. Imagine it as a magical box where we can quickly find and use any information we need.</p> <p>Database Management System (DBMS): Think of a DBMS as a helpful guide or librarian in our digital library. This guide makes sure everything is in order, helps us add new things, find what we're looking for, and keeps everything safe and secure. Popular guides include MySQL, Oracle, and Microsoft SQL Server.</p> <p>Relational Database Management System (RDBMS): An RDBMS is a special kind of guide who loves arranging things in neat tables. Imagine a table like a big grid, with rows going across and columns going down. Each table can hold different types of information, and these tables are like friendly neighbors who talk to each other. For example, think of a table for students and another for their grades. The tables connect using special codes, like student IDs, creating relationships between them.</p> <p>Example: Imagine you have a school database. In one table, you have a list of students with their names, ages, and student IDs. In another table, you have their grades with student IDs linking them back to the first table. So, if you want to know a student's grade, you look at the tables, find their ID, and see the grade \u2013 just like finding a book in the library with the help of our guide!</p> <p>This way, everything stays organized, and we can quickly find who scored the highest or which students are in a particular grade. It's like magic organization for our digital school world!</p> Summary <ul> <li> <p>Database (DB):</p> <ul> <li>Refers to the structured collection of data.</li> </ul> </li> <li> <p>Database Management System (DBMS):</p> <ul> <li>Software that manages and provides an interface to interact with databases.</li> </ul> </li> <li> <p>Relational Database Management System (RDBMS):</p> <ul> <li>Specific type of DBMS.  Organizes data into tables based on the relational model.</li> <li>Emphasizes relationships between tables.</li> </ul> </li> </ul>"},{"location":"SQL/1.introduction.html#database-usage","title":"DataBase Usage","text":"<p>Frontend: Imagine you are in a magical library. The shelves, books, and how you interact with them \u2013 that's the frontend! It's what you see and touch. In a computer world, this could be like a colorful and easy-to-use library website. You click on buttons to search for books, and you see the information about the books on the screen.</p> <p>Example: The frontend is like the library's colorful entrance with big buttons like \"Search\" and \"Read a Book.\" You click on them, and the magic begins!</p> <p>Backend: Now, behind the scenes, there are wizards and fairies working hard to make sure everything runs smoothly. They organize the books on the shelves, keep track of who borrows them, and manage the library's overall operation. In the computer world, this is the backend. It's where the logic, calculations, and data management happen.</p> <p>Example: The backend is like the hidden part of the library where magical creatures organize the books, keep records of who borrowed what, and make sure everything is in order.</p> <p>Database: But, where do all the book details and borrower information go? That's where the enchanted book called the \"Database\" comes in. It's like a big, organized book of spells that keeps track of every book, who borrowed it, and even which shelf it's on.</p> <p>Example: The database is like a magical book that knows everything about every book in the library. When you search for a book on the website, it's the database that quickly finds the information and tells the frontend to show it to you.</p> Summary <p>-Frontend Magic:     - Frontend is what you see \u2013 the colorful library entrance and buttons.</p> <ul> <li> <p>Behind the Scenes (Backend):</p> <ul> <li>Backend is the magical creatures behind the scenes managing everything.</li> </ul> </li> <li> <p>Database Enchantment:</p> <ul> <li>Database is the enchanted book keeping track of all the details about every book.</li> </ul> </li> </ul>"},{"location":"SQL/1.introduction.html#architecture","title":"Architecture","text":""},{"location":"SQL/2.SQL%20Basics.html","title":"2.Basics","text":""},{"location":"SQL/2.SQL%20Basics.html#2basics","title":"2.Basics","text":"<p>SQL (Structured Query Language):</p> <p>SQL, or Structured Query Language, is a programming language used for managing and manipulating relational databases. It allows users to interact with databases by defining and manipulating data. SQL is essential for tasks such as querying databases, updating records, inserting new data, and creating or modifying database structures.</p> <p>Example:</p> <p>Let's consider a simple scenario of a library database. We want to retrieve information about books that are available in the library.</p> <pre><code>-- SQL Query to Retrieve Book Information\nSELECT BookTitle, Author, PublicationYear\nFROM Books\nWHERE Status = 'Available';\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>SELECT</code>: This keyword is used to specify the columns that you want to retrieve from the database.</p> </li> <li> <p><code>BookTitle, Author, PublicationYear</code>: These are the column names we want to retrieve information from.</p> </li> <li> <p><code>FROM Books</code>: Specifies the table (in this case, \"Books\") from which to retrieve the data.</p> </li> <li> <p><code>WHERE Status = 'Available'</code>: This part filters the results to only include books with the status \"Available.\"</p> </li> </ul> <p>In simple terms, this SQL query is like asking the database: \"Give me the titles, authors, and publication years of all available books from the 'Books' table.\"</p> <p>The database will then respond with a list of books that match the specified conditions. SQL queries are powerful tools for managing and extracting information from databases, and they can become more complex depending on the requirements of the task at hand.</p>"},{"location":"SQL/2.SQL%20Basics.html#what-can-sql-do","title":"What Can SQL do?","text":"<ul> <li>SQL can execute queries against a database.</li> <li>SQL can retrieve data from a database.</li> <li>SQL can insert records in a database.</li> <li>SQL can update records in a database.</li> <li>SQL can delete records from a database.</li> <li>SQL can create new databases.</li> <li>SQL can create new tables in a database.</li> <li>SQL can create stored procedures in a database.</li> <li>SQL can create views in a database.</li> <li>SQL can set permissions on tables, procedures, and views.</li> </ul>"},{"location":"SQL/2.SQL%20Basics.html#sql-data-types","title":"SQL Data Types","text":"Data Type Description Length INT Integer - VARCHAR(size) Variable-length character string 1 to 65,535 bytes CHAR(size) Fixed-length character string Up to 255 bytes TEXT Variable-length text Up to 65,535 bytes DATE Date (YYYY-MM-DD) - TIME Time (HH:MM:SS) - DATETIME Date and time (YYYY-MM-DD HH:MM:SS) - TIMESTAMP Timestamp - FLOAT Floating-point number - DOUBLE Double-precision floating-point number - DECIMAL(p, s) Fixed-point number - BOOLEAN Boolean value (0 or 1) - ENUM(val1, val2) Enumeration of possible values - SET(val1, val2) Set of possible values - BLOB Binary Large Object (for binary data) Up to 65,535 bytes <p>DDL, or Data Definition Language, commands in SQL are used to define the structure of a database. These commands enable the creation, modification, and deletion of database objects, such as tables and indexes. Here are some common DDL commands along with examples:</p>"},{"location":"SQL/2.SQL%20Basics.html#ddl","title":"DDL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-create","title":"1. CREATE:","text":"<p>The <code>CREATE</code> command is used to create a new database object, such as a table.</p> <p>Example: Creating a Table </p><pre><code>CREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    hire_date DATE\n);\n</code></pre> This example creates a table named \"employees\" with columns for employee ID, first name, last name, and hire date."},{"location":"SQL/2.SQL%20Basics.html#2-alter","title":"2. ALTER:","text":"<p>The <code>ALTER</code> command is used to modify the structure of an existing database object.</p> <p>Example: Adding a Column to a Table </p><pre><code>ALTER TABLE employees\nADD department VARCHAR(50);\n</code></pre> This example adds a new column named \"department\" to the existing \"employees\" table."},{"location":"SQL/2.SQL%20Basics.html#3-drop","title":"3. DROP:","text":"<p>The <code>DROP</code> command is used to delete a database object, such as a table or database.</p> <p>Example: Dropping a Table </p><pre><code>DROP TABLE employees;\n</code></pre> This example deletes the \"employees\" table and removes all data associated with it."},{"location":"SQL/2.SQL%20Basics.html#4-truncate","title":"4. TRUNCATE:","text":"<p>The <code>TRUNCATE</code> command is used to remove all records from a table but keep the table structure for future use.</p> <p>Example: Truncating a Table </p><pre><code>TRUNCATE TABLE employees;\n</code></pre> This example removes all records from the \"employees\" table, leaving the table structure intact."},{"location":"SQL/2.SQL%20Basics.html#5-rename","title":"5. RENAME:","text":"<p>Although not supported in all database systems, the <code>RENAME</code> command is used to rename an existing database object.</p> <p>Example: Renaming a Table </p><pre><code>-- Syntax varies by database system\nRENAME TABLE old_table_name TO new_table_name;\n</code></pre> This example illustrates the concept, but syntax may differ between database systems. <p>These DDL commands play a crucial role in defining and modifying the structure of a database, allowing users to create, alter, and delete database objects as needed.</p> <p>Certainly! Let's delve into the explanations of the DML (Data Manipulation Language) commands: INSERT, UPDATE, and DELETE in SQL.</p>"},{"location":"SQL/2.SQL%20Basics.html#dml","title":"DML","text":""},{"location":"SQL/2.SQL%20Basics.html#1-insert","title":"1. INSERT:","text":"<p>The <code>INSERT</code> command is used to add new records or rows into a table.</p> <p>Example: Inserting Data into a Table </p><pre><code>-- Inserting a new employee record\nINSERT INTO employees (employee_id, first_name, last_name, hire_date)\nVALUES (101, 'John', 'Doe', '2022-03-01');\n</code></pre> <p>In this example: - <code>employees</code> is the table name. - <code>(employee_id, first_name, last_name, hire_date)</code> lists the columns where data will be inserted. - <code>VALUES (101, 'John', 'Doe', '2022-03-01')</code> provides the actual data to be inserted into the specified columns.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-update","title":"2. UPDATE:","text":"<p>The <code>UPDATE</code> command is used to modify existing records in a table.</p> <p>Example: Updating Data in a Table </p><pre><code>-- Updating the last name of the employee with ID 101\nUPDATE employees\nSET last_name = 'Smith'\nWHERE employee_id = 101;\n</code></pre> <p>In this example: - <code>employees</code> is the table name. - <code>SET last_name = 'Smith'</code> updates the value of the <code>last_name</code> column. - <code>WHERE employee_id = 101</code> specifies the condition for updating records; in this case, only the record with <code>employee_id</code> equal to 101.</p>"},{"location":"SQL/2.SQL%20Basics.html#3-delete","title":"3. DELETE:","text":"<p>The <code>DELETE</code> command is used to remove records from a table.</p> <p>Example: Deleting Data from a Table </p><pre><code>-- Deleting the employee with ID 101\nDELETE FROM employees\nWHERE employee_id = 101;\n</code></pre> <p>In this example: - <code>employees</code> is the table name. - <code>WHERE employee_id = 101</code> specifies the condition for deleting records; in this case, only the record with <code>employee_id</code> equal to 101.</p> <p>These DML commands are fundamental for managing and manipulating data within SQL databases. They enable the insertion of new data, modification of existing data, and deletion of unwanted data, providing the flexibility needed to maintain and update the database content.</p> <p>DCL, or Data Control Language, commands in SQL are used to control access to the database by granting or revoking privileges to users. The two main DCL commands are GRANT and REVOKE.</p>"},{"location":"SQL/2.SQL%20Basics.html#dcl","title":"DCL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-grant","title":"1. GRANT:","text":"<p>The <code>GRANT</code> command is used to give specific privileges to users or roles. Privileges define the type of operations a user or role is allowed to perform on a database object.</p> <p>Example: Granting SELECT Privilege on a Table </p><pre><code>-- Granting SELECT privilege on the \"employees\" table to the user \"john\"\nGRANT SELECT ON employees TO john;\n</code></pre> <p>In this example: - <code>SELECT</code> is the privilege being granted. - <code>employees</code> is the table on which the privilege is granted. - <code>john</code> is the user to whom the privilege is granted.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-revoke","title":"2. REVOKE:","text":"<p>The <code>REVOKE</code> command is used to take back or remove previously granted privileges from users or roles.</p> <p>Example: Revoking SELECT Privilege on a Table </p><pre><code>-- Revoking SELECT privilege on the \"employees\" table from the user \"john\"\nREVOKE SELECT ON employees FROM john;\n</code></pre> <p>In this example: - <code>SELECT</code> is the privilege being revoked. - <code>employees</code> is the table from which the privilege is revoked. - <code>john</code> is the user from whom the privilege is revoked.</p> <p>These DCL commands are crucial for managing the security and access control of a database. They ensure that only authorized users or roles can perform specific operations on the database objects, helping to maintain data integrity and protect sensitive information.</p> <p>TCL, or Transaction Control Language, commands in SQL are used to manage transactions within a database. Transactions are sequences of one or more SQL statements that are executed as a single unit of work. TCL commands help in controlling the flow of these transactions.</p>"},{"location":"SQL/2.SQL%20Basics.html#tcl","title":"TCL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-commit","title":"1. COMMIT:","text":"<p>The <code>COMMIT</code> command is used to permanently save the changes made during the current transaction.</p> <p>Example: Committing a Transaction </p><pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Committing the changes made in the transaction\nCOMMIT;\n</code></pre> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - <code>COMMIT</code> saves the changes made in the transaction permanently. If the transaction is successful, the changes become permanent; otherwise, they are rolled back.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-rollback","title":"2. ROLLBACK:","text":"<p>The <code>ROLLBACK</code> command is used to undo the changes made during the current transaction.</p> <p>Example: Rolling Back a Transaction </p><pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Something went wrong, rolling back the changes\nROLLBACK;\n</code></pre> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - If something goes wrong, <code>ROLLBACK</code> is used to undo the changes made during the transaction.</p>"},{"location":"SQL/2.SQL%20Basics.html#3-savepoint","title":"3. SAVEPOINT:","text":"<p>The <code>SAVEPOINT</code> command is used to set a point within a transaction to which you can later roll back.</p> <p>Example: Setting a Savepoint </p><pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Setting a savepoint\nSAVEPOINT my_savepoint;\n\n-- More SQL statements modifying data\n\n-- Rolling back to the savepoint\nROLLBACK TO my_savepoint;\n</code></pre> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - <code>SAVEPOINT my_savepoint</code> sets a savepoint within the transaction. - More SQL statements modify data. - <code>ROLLBACK TO my_savepoint</code> rolls back the transaction to the specified savepoint, undoing changes made after that point.</p> <p>TCL commands ensure data consistency and integrity by controlling the execution and outcome of transactions within a database.</p> <p>DQL, or Data Query Language, is a subset of SQL (Structured Query Language) used for querying and retrieving data from a database. The primary DQL command is <code>SELECT</code>, which is employed to retrieve data from one or more tables based on specified conditions.</p>"},{"location":"SQL/2.SQL%20Basics.html#dql","title":"DQL","text":""},{"location":"SQL/2.SQL%20Basics.html#select-syntax","title":"SELECT Syntax:","text":"<p>The basic syntax of the <code>SELECT</code> statement is as follows:</p> <pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> <ul> <li><code>column1, column2, ...</code>: The columns you want to retrieve data from.</li> <li><code>table_name</code>: The name of the table from which you want to retrieve data.</li> <li><code>WHERE condition</code>: Optional. Specifies conditions that the data must meet for inclusion in the result set.</li> </ul>"},{"location":"SQL/2.SQL%20Basics.html#example-retrieving-data-from-a-table","title":"Example: Retrieving Data from a Table","text":"<p>Let's consider a simple table named <code>employees</code>:</p> <pre><code>SELECT employee_id, first_name, last_name, hire_date\nFROM employees\nWHERE department = 'IT';\n</code></pre> <p>In this example: - <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, and <code>hire_date</code> are the columns being selected. - <code>employees</code> is the table from which the data is retrieved. - <code>WHERE department = 'IT'</code> is an optional condition specifying that only records with the department 'IT' should be included in the result set.</p>"},{"location":"SQL/2.SQL%20Basics.html#additional-select-features","title":"Additional SELECT Features:","text":"<ol> <li>Alias Names:    You can use aliases to provide temporary names to columns or tables in the result set.</li> </ol> <pre><code>SELECT first_name AS \"First Name\", last_name AS \"Last Name\"\nFROM employees;\n</code></pre> <ol> <li>Aggregate Functions:    You can use aggregate functions like <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MAX</code>, and <code>MIN</code> to perform calculations on data.</li> </ol> <pre><code>SELECT AVG(salary) AS \"Average Salary\"\nFROM employees\nWHERE department = 'Finance';\n</code></pre> <ol> <li>Sorting:    You can use the <code>ORDER BY</code> clause to sort the result set based on one or more columns.</li> </ol> <pre><code>SELECT employee_id, first_name, last_name\nFROM employees\nORDER BY last_name, first_name;\n</code></pre> <ol> <li>Filtering:    The <code>WHERE</code> clause allows you to filter data based on specified conditions.</li> </ol> <pre><code>SELECT product_name, price\nFROM products\nWHERE price &gt; 100;\n</code></pre> <ol> <li>JOIN Operations: <code>SELECT</code> can be used with <code>JOIN</code> operations to combine data from multiple tables.</li> </ol> <pre><code>SELECT employees.first_name, employees.last_name, departments.department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.department_id;\n</code></pre> <p>The <code>SELECT</code> command is a versatile and powerful tool for querying databases, allowing you to retrieve specific data based on your requirements.</p>"},{"location":"SQL/2.SQL%20Basics.html#sql-constraints","title":"SQL Constraints","text":"<p>SQL constraints are used to specify rules for the data in a table. Constraints are employed to limit the type of data that can go into a table, ensuring the accuracy and reliability of the data. If there is any violation between the constraint and the data action, the action is aborted. Constraints can be at the column level or table level.</p> <p>The following constraints are commonly used in SQL:</p> <ul> <li> <p>NOT NULL: Ensures that a column cannot have a NULL value.</p> </li> <li> <p>UNIQUE: Ensures that all values in a column are different.</p> </li> <li> <p>PRIMARY KEY: A combination of NOT NULL and UNIQUE. Uniquely identifies each row in a table.</p> </li> <li> <p>FOREIGN KEY: Prevents actions that would destroy links between tables.</p> </li> <li> <p>CHECK: Ensures that the values in a column satisfy a specific condition.</p> </li> <li> <p>DEFAULT: Sets a default value for a column if no value is specified.</p> </li> </ul> Things to Remember <ul> <li> <p>Case Sensitivity:</p> <ul> <li>SQL keywords are NOT case-sensitive: <code>select</code> is the same as <code>SELECT</code>.</li> </ul> </li> <li> <p>Statement Termination:</p> <ul> <li>Some database systems require a semicolon at the end of each SQL statement.</li> </ul> </li> <li> <p>Semicolon Usage:</p> <ul> <li>Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.</li> </ul> </li> </ul>"},{"location":"SQL/Assignments/SQL/Assignment-1.html","title":"Assignment 1","text":""},{"location":"SQL/Assignments/SQL/Assignment-1.html#sql-assignment1","title":"SQL Assignment1","text":"<p>Q1.  Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA. The CITY table is described as follows:</p> <p></p> Answer <p>Q2.Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA. The CITY table is described as follows:</p> Answer <p>SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 120000;</p> <p>Q3. Query all columns (attributes) for every row in the CITY table. The CITY table is described as follows:</p> Answer <p>select * from CITY;</p> <p>Q4. Query all columns for a city in CITY with the ID 1661.</p> Answer <p>select * from CITY where ID = 1661;</p> <p>Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.</p> Answer <p>SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';</p> <p>Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.</p> Answer <p>SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';</p> <p>Q7. Query a list of CITY and STATE from the STATION table. The STATION table is described as follows:</p> <p></p> <p>where LAT_N is the northern latitude and LONG_W is the western longitude.</p> Answer <p>Certainly! Here's an explanation of the provided SQL commands in Markdown format:</p> <p>Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.</p> Answer <p>Q9. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.     where LAT_N is the northern latitude and LONG_W is the western longitude.     For example, if there are three records in the table with CITY values 'New York', 'New York', 'Bengalaru', there are 2 different city names: 'New York' and 'Bengalaru'. The query returns , because total number of records - number of unique city names = 3-2 =1</p> Answer <pre><code>## Explanation of SQL Query\n\n### Objective\nThe SQL query aims to retrieve information about the `CITY` column in the `STATION` table, including the total number of records, the number of unique city names, and the difference between the total count and the count of distinct city names.\n\n### SQL Query\n```sql\nSELECT \n    COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS,\n    COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES,\n    (COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT  \nFROM \n    STATION;\n</code></pre> <p>--Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. --Sample Input --For example, CITY has four entries: DEF, ABC, PQRS and WXY. --Sample Output --ABC 3 --PQRS 4 --Hint - --When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths and. The longest name is PQRS, but there are options for shortest named city. Choose ABC, because it comes first alphabetically. --Note --You can write two separate queries to get the desired output. It need not be a single query.</p> Answer <pre><code>## Explanation of SQL Queries\n\n### Query 1\n```sql\nSELECT CITY, LENGTH(CITY) AS MIN_LENGTH_OF_CITY\nFROM STATION\nORDER BY LENGTH(CITY) ASC\nLIMIT 1;\n</code></pre> <p>Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.</p> Answer <pre><code>```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE LOWER(CITY) LIKE 'a%'\n   OR LOWER(CITY) LIKE 'e%'\n   OR LOWER(CITY) LIKE 'i%'\n   OR LOWER(CITY) LIKE 'o%'\n   OR LOWER(CITY) LIKE 'u%'\nORDER BY CITY;\n</code></pre> <p>Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates. Certainly! Here's the explanation of the provided SQL query in Markdown format:</p> Answer <pre><code>## Explanation of SQL Query\n\n```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE LOWER(CITY) LIKE '%a'\n   OR LOWER(CITY) LIKE '%e'\n   OR LOWER(CITY) LIKE '%i'\n   OR LOWER(CITY) LIKE '%o'\n   OR LOWER(CITY) LIKE '%u'\nORDER BY CITY;\n</code></pre> <p>Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.</p> Answer <pre><code>```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE LOWER(CITY) NOT LIKE 'a%'\n   AND LOWER(CITY) NOT LIKE 'e%'\n   AND LOWER(CITY) NOT LIKE 'i%'\n   AND LOWER(CITY) NOT LIKE 'o%'\n   AND LOWER(CITY) NOT LIKE 'u%'\nORDER BY CITY;\n</code></pre> <p>Q14.Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.</p> Answer <pre><code>```markdown\n## Explanation of SQL Query\n\n```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE LOWER(CITY) NOT LIKE '%a'\n   AND LOWER(CITY) NOT LIKE '%e'\n   AND LOWER(CITY) NOT LIKE '%i'\n   AND LOWER(CITY) NOT LIKE '%o'\n   AND LOWER(CITY) NOT LIKE '%u'\nORDER BY CITY;\n```\n</code></pre> <p>Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.</p> Answer <pre><code>```markdown\n## Explanation of SQL Query\n\n```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE CITY NOT REGEXP '^[aeiou]' OR CITY NOT REGEXP '[aeiou]$';\n```\n\n### Objective\nThe SQL query aims to retrieve distinct city names from the `CITY` column in the `STATION` table where the city name does not start with a vowel ('a', 'e', 'i', 'o', or 'u') or end with a vowel. The result set only includes city names that satisfy either of these conditions.\n\n### Explanation\n\n1. **`SELECT DISTINCT CITY`**:\n   - This part of the query selects distinct city names from the `CITY` column.\n\n   2. **`FROM STATION`**:\n      - Specifies that the data is to be retrieved from the `STATION` table.\n\n   3. **`WHERE CITY NOT REGEXP '^[aeiou]' OR CITY NOT REGEXP '[aeiou]$'`**:\n      - The `WHERE` clause filters the results based on the condition that the city name should not match the regular expression patterns.\n      - `'^[aeiou]'` checks if the city name does not start with a vowel.\n      - `'[aeiou]$'` checks if the city name does not end with a vowel.\n      - The `OR` operator allows the inclusion of city names that satisfy either of these conditions.\n\n### Result\nThe result of the query will be a list of distinct city names from the `STATION` table where each city name does not start with a vowel or does not end with a vowel. This provides a subset of city names that meet the specified criteria.\n\nThis query is useful for obtaining a result set containing only distinct city names that do not start or end with a vowel.\n</code></pre>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#creating-the-city-table","title":"Creating the CITY Table","text":"<pre><code>CREATE TABLE CITY\n(\n    ID INT,\n    NAME VARCHAR(17),\n    COUNTRYCODE VARCHAR(3),\n    DISTRICT VARCHAR(20),\n    POPULATION INT\n);\n</code></pre> <p>This SQL command creates a table named CITY with columns ID (integer), NAME (varchar with a maximum length of 17 characters), COUNTRYCODE (varchar with a maximum length of 3 characters), DISTRICT (varchar with a maximum length of 20 characters), and POPULATION (integer).</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#describing-the-city-table","title":"Describing the CITY Table","text":"<pre><code>DESCRIBE CITY;\n</code></pre> <p>This command is used to display information about the structure of the CITY table, including the column names, data types, and any constraints.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#inserting-data-into-the-city-table","title":"Inserting Data into the CITY Table","text":"<pre><code>INSERT INTO CITY VALUES\n(6, 'Rotterdam', 'NLD', 'Zuid-Holland', 593321),\n(3878, 'Scottsdale', 'USA', 'Arizona', 202705),\n-- (and additional rows)\n;\n</code></pre> <p>These commands insert data into the CITY table, providing values for the ID, NAME, COUNTRYCODE, DISTRICT, and POPULATION columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#selecting-all-rows-from-the-city-table","title":"Selecting All Rows from the CITY Table","text":"<pre><code>SELECT * FROM CITY;\n</code></pre> <p>This command retrieves all rows from the CITY table, displaying the values in all columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#filtering-rows-based-on-conditions","title":"Filtering Rows Based on Conditions","text":"<pre><code>SELECT ID, NAME, COUNTRYCODE, DISTRICT, POPULATION\nFROM CITY\nWHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000;\n</code></pre> <p>This query selects specific columns from the CITY table for rows where the COUNTRYCODE is 'USA' and the POPULATION is greater than 100,000.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#alternative-query-with-asterisk","title":"Alternative Query with Asterisk","text":"<pre><code>SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000;\n</code></pre> <p>This is an equivalent query to the previous one, but it selects all columns using the asterisk (*) wildcard.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#creating-the-station-table","title":"Creating the STATION Table","text":"<pre><code>CREATE TABLE IF NOT EXISTS STATION\n(\n     ID INT,\n     CITY VARCHAR(21),\n     STATE VARCHAR(2),\n     LAT_N INT,\n     LONG_W INT\n);\n</code></pre> <p>This SQL command creates a table named STATION with columns ID (integer), CITY (varchar with a maximum length of 21 characters), STATE (varchar with a maximum length of 2 characters), LAT_N (integer), and LONG_W (integer). The \"IF NOT EXISTS\" clause ensures that the table is created only if it does not already exist.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#describing-the-station-table","title":"Describing the STATION Table","text":"<pre><code>DESCRIBE STATION;\n</code></pre> <p>This command is used to display information about the structure of the STATION table, including the column names, data types, and any constraints.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#inserting-data-into-the-station-table","title":"Inserting Data into the STATION Table","text":"<pre><code>-- (Multiple INSERT statements with data)\nINSERT INTO STATION VALUES\n(794, 'Kissee Mills', 'MO', 139, 73),\n(824, 'Loma Mar', 'CA', 48, 130),\n-- (and additional rows)\n;\n</code></pre> <p>These commands insert data into the STATION table, providing values for the ID, CITY, STATE, LAT_N, and LONG_W columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#selecting-all-rows-from-the-station-table","title":"Selecting All Rows from the STATION Table","text":"<pre><code>SELECT * FROM STATION;\n</code></pre> <p>This command retrieves all rows from the STATION table, displaying the values in all columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#selecting-specific-columns-from-the-station-table","title":"Selecting Specific Columns from the STATION Table","text":"<pre><code>SELECT CITY, STATE FROM STATION;\n</code></pre> <p>This query selects specific columns (CITY and STATE) from the STATION table for all rows. It retrieves only the specified columns, providing a focused view of the data.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#selecting-distinct-city-names-from-station-table","title":"Selecting Distinct City Names from STATION Table","text":"<pre><code>SELECT DISTINCT(CITY) AS City_Name\nFROM STATION\nWHERE ID % 2 = 0\nORDER BY CITY ASC;\n</code></pre> <p>This SQL query performs the following operations:</p> <ol> <li> <p>SELECT DISTINCT(CITY) AS City_Name: It selects unique city names from the STATION table. The use of DISTINCT ensures that duplicate city names are excluded. The <code>AS City_Name</code> alias is used to rename the result column to \"City_Name.\"</p> </li> <li> <p>FROM STATION: Specifies the source table as STATION from which to retrieve the data.</p> </li> <li> <p>WHERE ID % 2 = 0: Filters the rows based on the condition that the ID column is even (divisible by 2). This means only rows with even ID values are included in the result set.</p> </li> <li> <p>ORDER BY CITY ASC: Orders the result set in ascending order based on the CITY column. The <code>ASC</code> keyword is optional, as sorting is ascending by default.</p> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation","title":"Explanation:","text":"<ul> <li> <p>SELECT DISTINCT(CITY) AS City_Name: This part of the query is responsible for selecting unique city names from the STATION table.</p> </li> <li> <p>FROM STATION: Specifies the table from which the data is being retrieved, which is the STATION table in this case.</p> </li> <li> <p>WHERE ID % 2 = 0: The WHERE clause filters the rows based on the condition that the ID column is even, ensuring that only rows with even ID values are considered.</p> </li> <li> <p>ORDER BY CITY ASC: Orders the result set in ascending order based on the CITY column. The result will be a list of distinct city names with even ID values, sorted alphabetically.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_1","title":"Explanation","text":"<ol> <li><code>COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS</code>: </li> <li>This part of the query calculates the total number of records in the <code>STATION</code> table by counting the occurrences of values in the <code>CITY</code> column.</li> <li> <p>The result is aliased as <code>TOTAL_NUMBER_OF_RECORDS</code> for better readability.</p> </li> <li> <p><code>COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES</code>: </p> <ul> <li>This part of the query calculates the count of distinct (unique) values in the <code>CITY</code> column.</li> <li>It provides the number of unique city names in the <code>STATION</code> table.</li> <li>The result is aliased as <code>NUMBER_OF_UNIQUE_CITY_NAMES</code>.</li> </ul> </li> <li> <p><code>(COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT</code>: </p> <ul> <li>This part of the query calculates the difference between the total count of city names and the count of distinct city names.</li> <li>It gives the count of non-unique (duplicate) city names in the <code>STATION</code> table.</li> <li>The result is aliased as <code>DIFFERENCE_CITY_COUNT</code>.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result","title":"Result","text":"<p>The final result of the query will provide a single row with three columns: - <code>TOTAL_NUMBER_OF_RECORDS</code>: Total count of records in the <code>STATION</code> table.   - <code>NUMBER_OF_UNIQUE_CITY_NAMES</code>: Count of unique city names in the <code>STATION</code> table.   - <code>DIFFERENCE_CITY_COUNT</code>: The difference between the total count and the count of distinct city names, indicating the number of duplicate city names in the <code>STATION</code> table. ```</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective","title":"Objective","text":"<p>The first query aims to retrieve the city with the minimum length (number of characters) from the <code>CITY</code> column in the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_2","title":"Explanation","text":"<ol> <li><code>SELECT CITY, LENGTH(CITY) AS MIN_LENGTH_OF_CITY</code>:</li> <li>The query selects the <code>CITY</code> column and calculates the length of each city name using <code>LENGTH(CITY)</code>.</li> <li> <p>The result is aliased as <code>MIN_LENGTH_OF_CITY</code> for better readability.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>ORDER BY LENGTH(CITY) ASC</code>:</p> <ul> <li>Orders the result set in ascending order based on the length of the city names.</li> <li>This ensures that the city with the minimum length comes first in the result set.</li> </ul> </li> <li> <p><code>LIMIT 1</code>:</p> <ul> <li>Limits the result set to only one row, effectively retrieving the city with the minimum length.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#query-2","title":"Query 2","text":"<pre><code>SELECT CITY, LENGTH(CITY) AS MAX_LENGTH_OF_CITY\nFROM STATION\nORDER BY LENGTH(CITY) DESC\nLIMIT 1;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective_1","title":"Objective","text":"<p>The second query aims to retrieve the city with the maximum length (number of characters) from the <code>CITY</code> column in the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_3","title":"Explanation","text":"<ol> <li><code>SELECT CITY, LENGTH(CITY) AS MAX_LENGTH_OF_CITY</code>:</li> <li>Similar to the first query, this selects the <code>CITY</code> column and calculates the length of each city name.</li> <li> <p>The result is aliased as <code>MAX_LENGTH_OF_CITY</code>.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>ORDER BY LENGTH(CITY) DESC</code>:</p> <ul> <li>Orders the result set in descending order based on the length of the city names.</li> <li>This ensures that the city with the maximum length comes first in the result set.</li> </ul> </li> <li> <p><code>LIMIT 1</code>:</p> <ul> <li>Limits the result set to only one row, effectively retrieving the city with the maximum length.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result_1","title":"Result","text":"<p>The result of each query will be a single row containing the city name and its corresponding length. The first query provides the city with the minimum length, and the second query provides the city with the maximum length. ```</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective_2","title":"Objective","text":"<p>The SQL query aims to retrieve distinct city names from the <code>CITY</code> column in the <code>STATION</code> table where the city name starts with a vowel (either 'a', 'e', 'i', 'o', or 'u'). The result is ordered alphabetically by city name.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_4","title":"Explanation","text":"<ol> <li><code>SELECT DISTINCT CITY</code>:</li> <li> <p>This part of the query selects distinct city names from the <code>CITY</code> column.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>WHERE LOWER(CITY) LIKE 'a%' OR LOWER(CITY) LIKE 'e%' OR LOWER(CITY) LIKE 'i%' OR LOWER(CITY) LIKE 'o%' OR LOWER(CITY) LIKE 'u%'</code>:</p> <ul> <li>The <code>WHERE</code> clause filters the results based on the condition that the lowercase version of the city name (<code>LOWER(CITY)</code>) should start with any of the vowels ('a', 'e', 'i', 'o', or 'u').</li> <li><code>LIKE 'a%'</code> checks for city names starting with 'a', and similarly for other vowels.</li> <li>The <code>LOWER()</code> function is used to ensure case-insensitive comparison.</li> </ul> </li> <li> <p><code>ORDER BY CITY</code>:</p> <ul> <li>Orders the result set alphabetically by the city names.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result_2","title":"Result","text":"<p>The result of the query will be a list of distinct city names from the <code>STATION</code> table where each city name starts with a vowel. The list is ordered alphabetically by city name.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective_3","title":"Objective","text":"<p>The SQL query aims to retrieve distinct city names from the <code>CITY</code> column in the <code>STATION</code> table where the city name ends with a vowel ('a', 'e', 'i', 'o', or 'u'). The result is ordered alphabetically by city name.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_5","title":"Explanation","text":"<ol> <li><code>SELECT DISTINCT CITY</code>:</li> <li> <p>This part of the query selects distinct city names from the <code>CITY</code> column.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i' OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u'</code>:</p> <ul> <li>The <code>WHERE</code> clause filters the results based on the condition that the lowercase version of the city name (<code>LOWER(CITY)</code>) should end with any of the vowels ('a', 'e', 'i', 'o', or 'u').</li> <li><code>LIKE '%a'</code> checks for city names ending with 'a', and similarly for other vowels.</li> <li>The <code>%</code> symbol is a wildcard character that represents zero or more characters.</li> </ul> </li> <li> <p><code>ORDER BY CITY</code>:</p> <ul> <li>Orders the result set alphabetically by the city names.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result_3","title":"Result","text":"<p>The result of the query will be a list of distinct city names from the <code>STATION</code> table where each city name ends with a vowel. The list is ordered alphabetically by city name.</p> <p>This query is useful for obtaining a subset of city names that meet the specified criteria, providing a result set containing only distinct city names that end with a vowel.</p> <pre><code>```markdown\n## Explanation of SQL Query\n\n```sql\nSELECT DISTINCT CITY\nFROM STATION\nWHERE LOWER(CITY) LIKE '%a'\n   OR LOWER(CITY) LIKE '%e'\n   OR LOWER(CITY) LIKE '%i'\n   OR LOWER(CITY) LIKE '%o'\n   OR LOWER(CITY) LIKE '%u'\nORDER BY CITY;\n```\n\n### Objective\nThe SQL query aims to retrieve distinct city names from the `CITY` column in the `STATION` table where the city name ends with a vowel ('a', 'e', 'i', 'o', or 'u'). The result is ordered alphabetically by city name.\n\n### Explanation\n\n1. **`SELECT DISTINCT CITY`**:\n   - This part of the query selects distinct city names from the `CITY` column.\n\n   2. **`FROM STATION`**:\n      - Specifies that the data is to be retrieved from the `STATION` table.\n\n   3. **`WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i' OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u'`**:\n      - The `WHERE` clause filters the results based on the condition that the lowercase version of the city name (`LOWER(CITY)`) should end with any of the vowels ('a', 'e', 'i', 'o', or 'u').\n      - `LIKE '%a'` checks for city names ending with 'a', and similarly for other vowels.\n      - The `%` symbol is a wildcard character that represents zero or more characters.\n\n   4. **`ORDER BY CITY`**:\n      - Orders the result set alphabetically by the city names.\n\n### Result\nThe result of the query will be a list of distinct city names from the `STATION` table where each city name ends with a vowel. The list is ordered alphabetically by city name.\n</code></pre>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective_4","title":"Objective","text":"<p>The SQL query aims to retrieve distinct city names from the <code>CITY</code> column in the <code>STATION</code> table where the city name does not start with any vowel ('a', 'e', 'i', 'o', or 'u'). The result is ordered alphabetically by city name.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_6","title":"Explanation","text":"<ol> <li><code>SELECT DISTINCT CITY</code>:</li> <li> <p>This part of the query selects distinct city names from the <code>CITY</code> column.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>WHERE LOWER(CITY) NOT LIKE 'a%' AND LOWER(CITY) NOT LIKE 'e%' AND LOWER(CITY) NOT LIKE 'i%' AND LOWER(CITY) NOT LIKE 'o%' AND LOWER(CITY) NOT LIKE 'u%'</code>:</p> <ul> <li>The <code>WHERE</code> clause filters the results based on the condition that the lowercase version of the city name (<code>LOWER(CITY)</code>) should not start with any of the vowels ('a', 'e', 'i', 'o', or 'u').</li> <li><code>NOT LIKE 'a%'</code> ensures that city names do not start with 'a', and similarly for other vowels.</li> </ul> </li> <li> <p><code>ORDER BY CITY</code>:</p> <ul> <li>Orders the result set alphabetically by the city names.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result_4","title":"Result","text":"<p>The result of the query will be a list of distinct city names from the <code>STATION</code> table where each city name does not start with any vowel. The list is ordered alphabetically by city name.</p> <p>This query is useful for obtaining a subset of city names that meet the specified criteria, providing a result set containing only distinct city names that do not start with a vowel.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#objective_5","title":"Objective","text":"<p>The SQL query aims to retrieve distinct city names from the <code>CITY</code> column in the <code>STATION</code> table where the city name does not contain any vowel ('a', 'e', 'i', 'o', or 'u') in any position. The result is ordered alphabetically by city name.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#explanation_7","title":"Explanation","text":"<ol> <li><code>SELECT DISTINCT CITY</code>:</li> <li> <p>This part of the query selects distinct city names from the <code>CITY</code> column.</p> </li> <li> <p><code>FROM STATION</code>:</p> <ul> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table.</li> </ul> </li> <li> <p><code>WHERE LOWER(CITY) NOT LIKE '%a' AND LOWER(CITY) NOT LIKE '%e' AND LOWER(CITY) NOT LIKE '%i' AND LOWER(CITY) NOT LIKE '%o' AND LOWER(CITY) NOT LIKE '%u'</code>:</p> <ul> <li>The <code>WHERE</code> clause filters the results based on the condition that the lowercase version of the city name (<code>LOWER(CITY)</code>) should not contain any of the vowels ('a', 'e', 'i', 'o', or 'u') in any position.</li> <li><code>NOT LIKE '%a'</code> ensures that city names do not contain 'a' in any position, and similarly for other vowels.</li> </ul> </li> <li> <p><code>ORDER BY CITY</code>:</p> <ul> <li>Orders the result set alphabetically by the city names.</li> </ul> </li> </ol>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#result_5","title":"Result","text":"<p>The result of the query will be a list of distinct city names from the <code>STATION</code> table where each city name does not contain any vowel in any position. The list is ordered alphabetically by city name.</p> <p>This query is useful for obtaining a subset of city names that meet the specified criteria, providing a result set containing only distinct city names that do not contain any vowel.</p>"},{"location":"SQL/Assignments/SQL/Sample.html","title":"SQL Query Challenges","text":""},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-challenges","title":"SQL Query Challenges","text":""},{"location":"SQL/Assignments/SQL/Sample.html#city-dataset-questions","title":"City-Dataset Questions","text":"<p> 1. Query all columns for all American cities in the CITY table with populations larger than 100,000. The CountryCode for America is USA. 2. Query the NAME field for all American cities in the CITY table with populations larger than 120,000. The CountryCode for America is USA. 3. Query all columns (attributes) for every row in the CITY table. 4. Query all columns for a city in CITY with the ID 1661. 5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN. 6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.</p> <p></p>"},{"location":"SQL/Assignments/SQL/Sample.html#station-table-questions","title":"Station-Table Questions","text":"<ol> <li>Query a list of CITY and STATE from the STATION table.</li> <li>Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.</li> <li>Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.</li> <li>Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths. If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.</li> <li>Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.</li> <li>Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.</li> <li>Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.</li> <li>Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.</li> <li>Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.</li> <li>Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#complex-query-challenges","title":"Complex Query Challenges","text":"<ol> <li>Write an SQL query that reports the products that were only sold in the first quarter of 2019.</li> <li>Write an SQL query to find all the authors that viewed at least one of their own articles.</li> <li>Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.</li> <li>Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.</li> <li>Write an SQL query to find the team size of each of the employees.</li> <li>Write an SQL query to find the type of weather in each country for November 2019.</li> <li>Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places.</li> <li>Write an SQL query to report the first login date for each player.</li> <li>Write an SQL query to report the device that is first logged in for each player.</li> <li>Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.</li> <li>Write an SQL query to find the users who have valid emails.</li> <li>Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.</li> <li>Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.</li> <li>Write an SQL query to find the npv of each query of the Queries table.</li> <li>Write an SQL query to find the npv of each query of the Queries table. (Duplicate of Q30)</li> <li>Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.</li> <li>Write an SQL query to report the distance travelled by each user.</li> <li>Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount. (Duplicate of Q26)</li> <li>Write an SQL query to:<ul> <li>Find the name of the user who has rated the greatest number of movies.</li> <li>Find the movie name with the highest average rating in February 2020.</li> </ul> </li> <li>Write an SQL query to report the distance travelled by each user. (Duplicate of Q33)</li> <li>Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null. (Duplicate of Q32)</li> <li>Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exist.</li> <li>Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons (person1, person2) where person1 &lt; person2.</li> <li>Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places. (Duplicate of Q23)</li> <li>Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.</li> <li>Write an SQL query to report the difference between the number of apples and oranges sold each day.</li> <li>Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places.</li> <li>Write an SQL query to report the managers with at least five direct reports.</li> <li>Write an SQL query to report the respective department name and number of students majoring in each department for all departments in the Department table.</li> <li>Write an SQL query to report the customer ids from the Customer table that bought all the products in the Product table.</li> <li>Write an SQL query that reports the most experienced employees in each project.</li> <li>Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been available for less than one month from today.</li> <li>Write a SQL query to find the highest grade with its corresponding course for each student.</li> <li>Write an SQL query to find the winner in each group.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-sql-commands","title":"Explanation of SQL Commands","text":""},{"location":"SQL/Assignments/SQL/Sample.html#q1-query-all-columns-for-all-american-cities-with-populations-larger-than-100000","title":"Q1. Query All Columns for All American Cities with Populations Larger Than 100,000","text":"<pre><code>SELECT ID, NAME, COUNTRYCODE, DISTRICT, POPULATION\nFROM CITY\nWHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective","title":"Objective","text":"<p>To select all details (ID, Name, CountryCode, District, Population) of American cities (where CountryCode is 'USA') from the <code>CITY</code> table that have a population greater than 100,000.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation","title":"Explanation","text":"<ol> <li><code>SELECT ID, NAME, COUNTRYCODE, DISTRICT, POPULATION</code>:</li> <li> <p>This command selects all columns of interest from the <code>CITY</code> table, providing a comprehensive view of the data for cities.</p> </li> <li> <p><code>FROM CITY</code>:</p> </li> <li> <p>Indicates the query is to retrieve data from the <code>CITY</code> table.</p> </li> <li> <p><code>WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000</code>:</p> </li> <li>The <code>WHERE</code> clause filters cities within the United States (<code>COUNTRYCODE = 'USA'</code>) that have a population exceeding 100,000. This ensures only relevant records matching both conditions are returned.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#result","title":"Result","text":"<p>The result set includes all columns of cities in the <code>CITY</code> table that are located in the USA and have populations over 100,000, giving detailed demographic insights into larger American cities.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q2-query-the-name-field-for-all-american-cities-with-populations-larger-than-120000","title":"Q2. Query the NAME Field for All American Cities with Populations Larger Than 120,000","text":"<pre><code>SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 120000;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_1","title":"Objective","text":"<p>To retrieve the names of cities in the USA with a population greater than 120,000 from the <code>CITY</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_1","title":"Explanation","text":"<ol> <li><code>SELECT NAME</code>:</li> <li> <p>Focuses on retrieving only the <code>NAME</code> column, which contains the names of the cities.</p> </li> <li> <p><code>FROM CITY</code>:</p> </li> <li> <p>Specifies the data source as the <code>CITY</code> table.</p> </li> <li> <p><code>WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 120000</code>:</p> </li> <li>Filters for cities within the United States having a population above 120,000. It ensures that only cities meeting both criteria are included in the output.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#result_1","title":"Result","text":"<p>Produces a list of names of American cities from the <code>CITY</code> table with populations exceeding 120,000, highlighting more densely populated areas within the country.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#general-structure-for-queries-q3-to-q5","title":"General Structure for Queries Q3 to Q5","text":"<p>Following the format requested, let's apply a similar explanation structure for the remaining queries:</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q3-query-all-columns-attributes-for-every-row-in-the-city-table","title":"Q3. Query All Columns (Attributes) for Every Row in the CITY Table","text":""},{"location":"SQL/Assignments/SQL/Sample.html#objective_2","title":"Objective","text":"<p>To select and display all data from every column of every record in the <code>CITY</code> table.</p> <pre><code>SELECT * FROM CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_2","title":"Explanation","text":"<ol> <li><code>SELECT *</code>:</li> <li> <p>The asterisk (*) is used to select all columns available in the <code>CITY</code> table without specifying each column name.</p> </li> <li> <p><code>FROM CITY</code>:</p> </li> <li>Indicates that the query will fetch data from all rows present in the <code>CITY</code> table.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#result_2","title":"Result","text":"<p>The output will include the complete dataset contained in the <code>CITY</code> table, providing an exhaustive view of all cities' data without any filtration.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q4-query-all-columns-for-a-city-in-city-with-the-id-1661","title":"Q4. Query All Columns for a City in CITY with the ID 1661","text":""},{"location":"SQL/Assignments/SQL/Sample.html#objective_3","title":"Objective","text":"<p>To retrieve full details of the city with the specific ID of 1661 from the <code>CITY</code> table.</p> <pre><code>SELECT * FROM CITY WHERE ID = 1661;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_3","title":"Explanation","text":"<ol> <li><code>SELECT *</code>:</li> <li> <p>Selects all columns from the specified row(s) in the <code>CITY</code> table.</p> </li> <li> <p><code>WHERE ID = 1661</code>:</p> </li> <li>Filters the query to return only the city that has an ID value of 1661, ensuring targeted retrieval of data.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#result_3","title":"Result","text":"<p>Returns all information about the city with ID 1661 from the <code>CITY</code> table, if such a city exists in the dataset.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q5-query-all-attributes-of-every-japanese-city-in-the-city-table","title":"Q5. Query All Attributes of Every Japanese City in the CITY Table","text":""},{"location":"SQL/Assignments/SQL/Sample.html#objective_4","title":"Objective","text":"<p>To fetch complete records for all cities in Japan (where CountryCode is 'JPN') from the <code>CITY</code> table.</p> <pre><code>SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_4","title":"Explanation","text":"<ol> <li><code>SELECT *</code>:</li> <li> <p>Aims to retrieve all columns for cities that meet the following condition.</p> </li> <li> <p><code>WHERE COUNTRYCODE = 'JPN'</code>:</p> </li> <li>The query is specifically focused on cities within Japan, filtering the results to include only those entries where the CountryCode matches 'JPN'.</li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#result_4","title":"Result","text":"<p>Generates a dataset of all Japanese cities listed in the <code>CITY</code> table, providing detailed</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-sql-query-selecting-japanese-cities-from-the-city-table","title":"Explanation of SQL Query: Selecting Japanese Cities from the CITY Table","text":""},{"location":"SQL/Assignments/SQL/Sample.html#q6","title":"Q6","text":"<pre><code>SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_5","title":"Objective","text":"<p>The purpose of this SQL query is to retrieve the names of all cities located in Japan from a database table named <code>CITY</code>.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_5","title":"Explanation","text":"<ul> <li><code>SELECT NAME</code>:</li> <li> <p>This part of the query specifies that only the <code>NAME</code> column, which contains the names of the cities, is to be retrieved from the table. It focuses the output solely on the city names, excluding any other information about the cities that might be stored in the table.</p> </li> <li> <p><code>FROM CITY</code>:</p> </li> <li> <p>Indicates that the data will be fetched from the <code>CITY</code> table. This table is presumed to contain information about various cities, including their names (<code>NAME</code>), country codes (<code>COUNTRYCODE</code>), and possibly other geographical details like districts or populations.</p> </li> <li> <p><code>WHERE COUNTRYCODE = 'JPN'</code>:</p> </li> <li>This condition filters the results of the query to include only those rows where the <code>COUNTRYCODE</code> column matches 'JPN'. The country code 'JPN' is commonly used as an abbreviation for Japan, meaning that this condition restricts the query results to cities within Japan.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_5","title":"Result","text":"<p>This query produces a list of city names from the <code>CITY</code> table that are located in Japan, based on the 'JPN' country code. The result is useful for identifying Japanese cities within a global or multi-national database, providing a focused view on a specific geographical region without extraneous data.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-q7","title":"Explanation of the SQL Query for Q7","text":"<pre><code>SELECT CITY, STATE FROM STATION;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_6","title":"Objective","text":"<p>To retrieve a list of cities along with their corresponding states from the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_6","title":"Explanation","text":"<ul> <li><code>SELECT CITY, STATE</code>:</li> <li> <p>This part of the query specifies the columns to be retrieved from the database. In this case, it's asking for the names of cities (<code>CITY</code>) and the states (<code>STATE</code>) they are located in.</p> </li> <li> <p><code>FROM STATION</code>:</p> </li> <li>Indicates the source of the data, which is the <code>STATION</code> table. This table contains various information about stations, including their city and state locations.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#creating-and-preparing-the-station-table","title":"Creating and Preparing the STATION Table","text":"<ul> <li><code>CREATE TABLE IF NOT EXISTS STATION</code>:</li> <li> <p>Before querying, a table named STATION is created with columns for ID, CITY, STATE, LAT_N (latitude), and LONG_W (longitude). The \"IF NOT EXISTS\" clause ensures the table is only created if it does not already exist in the database, preventing errors.</p> </li> <li> <p><code>DESCRIBE STATION;</code>:</p> </li> <li> <p>This command is used to display the structure of the STATION table, showing details about each column such as type and constraints. This step is more about understanding the table schema than a direct part of querying for city and state data.</p> </li> <li> <p><code>INSERT INTO STATION VALUES(...);</code>:</p> </li> <li>Multiple insert statements are used to populate the STATION table with data. Each <code>INSERT INTO</code> command adds a new row to the table, specifying values for all columns defined in the table structure.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_6","title":"Result","text":"<p>The query produces a list of cities and their states from the data available in the STATION table. This can be useful for various purposes, such as analyzing weather patterns by location, planning logistics, or even just for informational purposes related to geography.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-q7_1","title":"Explanation of the SQL Query for Q7","text":"<pre><code>SELECT CITY, STATE FROM STATION;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_7","title":"Objective","text":"<p>To retrieve a list of cities along with their corresponding states from the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_7","title":"Explanation","text":"<ul> <li><code>SELECT CITY, STATE</code>:</li> <li> <p>This part of the query specifies the columns to be retrieved from the database. In this case, it's asking for the names of cities (<code>CITY</code>) and the states (<code>STATE</code>) they are located in.</p> </li> <li> <p><code>FROM STATION</code>:</p> </li> <li>Indicates the source of the data, which is the <code>STATION</code> table. This table contains various information about stations, including their city and state locations.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#creating-and-preparing-the-station-table_1","title":"Creating and Preparing the STATION Table","text":"<ul> <li><code>CREATE TABLE IF NOT EXISTS STATION</code>:</li> <li> <p>Before querying, a table named STATION is created with columns for ID, CITY, STATE, LAT_N (latitude), and LONG_W (longitude). The \"IF NOT EXISTS\" clause ensures the table is only created if it does not already exist in the database, preventing errors.</p> </li> <li> <p><code>DESCRIBE STATION;</code>:</p> </li> <li> <p>This command is used to display the structure of the STATION table, showing details about each column such as type and constraints. This step is more about understanding the table schema than a direct part of querying for city and state data.</p> </li> <li> <p><code>INSERT INTO STATION VALUES(...);</code>:</p> </li> <li>Multiple insert statements are used to populate the STATION table with data. Each <code>INSERT INTO</code> command adds a new row to the table, specifying values for all columns defined in the table structure.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_7","title":"Result","text":"<p>The query produces a list of cities and their states from the data available in the STATION table. This can be useful for various purposes, such as analyzing weather patterns by location, planning logistics, or even just for informational purposes related to geography.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-q8","title":"Explanation of the SQL Query for Q8","text":"<pre><code>SELECT DISTINCT(CITY) AS City_Name FROM STATION WHERE ID % 2 = 0 ORDER BY CITY ASC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_8","title":"Objective","text":"<p>To retrieve a unique list of cities from the <code>STATION</code> table that have an even station ID number, ordered alphabetically.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_8","title":"Explanation","text":"<ul> <li><code>SELECT DISTINCT(CITY) AS City_Name</code>:</li> <li> <p>This command selects unique city names from the <code>CITY</code> column to ensure there are no duplicate entries in the output. It renames the output column to <code>City_Name</code> for clarity.</p> </li> <li> <p><code>FROM STATION</code>:</p> </li> <li> <p>Specifies the source of the data, which is the <code>STATION</code> table. This table contains records of various stations, including their city names and IDs.</p> </li> <li> <p><code>WHERE ID % 2 = 0</code>:</p> </li> <li> <p>The <code>WHERE</code> clause filters the records to include only those with an even <code>ID</code>. The modulus operator (<code>%</code>) is used to divide the ID by 2 and select records with a remainder of 0, indicating even numbers.</p> </li> <li> <p><code>ORDER BY CITY ASC</code>:</p> </li> <li>Ensures the resulting list of city names is sorted in ascending alphabetical order.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_8","title":"Result","text":"<p>This query generates a list of distinct city names where the station ID is even, with the city names presented in alphabetical order. It is useful for identifying specific geographic locations that meet a numerical condition on their identifiers, potentially aiding in organized data analysis or reporting.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query","title":"Explanation of the SQL Query","text":"<pre><code>SELECT COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS,\n       COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES,\n       (COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT\nFROM STATION;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_9","title":"Objective","text":"<p>To calculate the total number of city entries, the number of unique city names, and the difference between these two counts in the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_9","title":"Explanation","text":"<ul> <li><code>SELECT COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS</code>:</li> <li> <p>This part of the query counts the total number of <code>CITY</code> entries in the <code>STATION</code> table, including duplicates. It labels this count as <code>TOTAL_NUMBER_OF_RECORDS</code>.</p> </li> <li> <p><code>COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES</code>:</p> </li> <li> <p>Counts the unique city names in the <code>STATION</code> table, ignoring duplicates. This count is labeled as <code>NUMBER_OF_UNIQUE_CITY_NAMES</code>.</p> </li> <li> <p><code>(COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT</code>:</p> </li> <li> <p>Calculates the difference between the total number of city entries and the number of unique city names. This represents how many duplicate city entries exist in the table. The result is labeled as <code>DIFFERENCE_CITY_COUNT</code>.</p> </li> <li> <p><code>FROM STATION</code>:</p> </li> <li>Specifies that the data is to be retrieved from the <code>STATION</code> table, which contains information about various stations, including their city names.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_9","title":"Result","text":"<p>This query provides three key pieces of information: - The total number of city entries in the <code>STATION</code> table, which may include duplicates. - The total number of unique city names, eliminating any duplicates. - The difference between these two counts, indicating the presence and extent of duplicate city entries.</p> <p>This data can be useful for understanding the diversity of station locations and assessing data quality, particularly the redundancy of city names within the dataset.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-queries-for-finding-cities-with-shortest-and-longest-names","title":"Explanation of the SQL Queries for Finding Cities with Shortest and Longest Names","text":"<p>These SQL queries aim to identify the city with the shortest name and the city with the longest name in the <code>STATION</code> table. Each query also returns the length of the city name.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#query-for-the-shortest-city-name","title":"Query for the Shortest City Name","text":"<pre><code>SELECT CITY, LENGTH(CITY) AS MIN_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) ASC LIMIT 1;\n</code></pre> <ul> <li> <p><code>SELECT CITY, LENGTH(CITY) AS MIN_LENGTH_OF_CITY</code>: This part of the query selects two pieces of information for each city: the city's name (<code>CITY</code>) and the length of the city's name (<code>LENGTH(CITY)</code>). The length of the city name is labeled as <code>MIN_LENGTH_OF_CITY</code>.</p> </li> <li> <p><code>FROM STATION</code>: Specifies that the data should be retrieved from the <code>STATION</code> table.</p> </li> <li> <p><code>ORDER BY LENGTH(CITY) ASC</code>: Orders the cities by the length of their names in ascending order (from shortest to longest).</p> </li> <li> <p><code>LIMIT 1</code>: Limits the result set to the first record, which, due to the ordering, will be the city with the shortest name.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#query-for-the-longest-city-name","title":"Query for the Longest City Name","text":"<pre><code>SELECT CITY, LENGTH(CITY) AS MAX_LENGTH_OF_CITY FROM STATION ORDER BY LENGTH(CITY) DESC LIMIT 1;\n</code></pre> <ul> <li> <p><code>SELECT CITY, LENGTH(CITY) AS MAX_LENGTH_OF_CITY</code>: Selects each city's name and the length of its name, labeling the length as <code>MAX_LENGTH_OF_CITY</code>.</p> </li> <li> <p><code>FROM STATION</code>: Indicates the data source is the <code>STATION</code> table.</p> </li> <li> <p><code>ORDER BY LENGTH(CITY) DESC</code>: Orders the cities by the length of their names in descending order (from longest to shortest).</p> </li> <li> <p><code>LIMIT 1</code>: Restricts the output to the first record in the ordered list, which will be the city with the longest name because of the ordering criteria.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#results","title":"Results","text":"<ul> <li>The first query identifies the city with the shortest name in the <code>STATION</code> table, along with the length of that name.</li> <li>The second query identifies the city with the longest name, along with the length of that name.</li> </ul> <p>These queries are particularly useful for data analysis tasks that require understanding the variability in the length of city names within a dataset, such as preparing for data storage optimization or analyzing naming patterns.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query_1","title":"Explanation of the SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION\nWHERE lcase(CITY) LIKE 'a%'\nOR lcase(CITY) LIKE 'e%'\nOR lcase(CITY) LIKE 'i%'\nOR lcase(CITY) LIKE 'o%'\nOR lcase(CITY) LIKE 'u%'\nORDER BY CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_10","title":"Objective","text":"<p>To retrieve a list of unique city names from the <code>STATION</code> table that start with a vowel (a, e, i, o, u), disregarding case sensitivity.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_10","title":"Explanation","text":"<ul> <li><code>SELECT DISTINCT CITY</code>:</li> <li> <p>This part of the query selects unique city names from the <code>CITY</code> column to ensure no duplicates in the output.</p> </li> <li> <p><code>FROM STATION</code>:</p> </li> <li> <p>Indicates that the data is retrieved from the <code>STATION</code> table.</p> </li> <li> <p><code>WHERE lcase(CITY) LIKE 'a%' OR lcase(CITY) LIKE 'e%' OR lcase(CITY) LIKE 'i%' OR lcase(CITY) LIKE 'o%' OR lcase(CITY) LIKE 'u%'</code>:</p> </li> <li>The <code>WHERE</code> clause filters the cities based on the starting letter. It uses <code>lcase</code> function to convert city names to lowercase, making the comparison case-insensitive.</li> <li> <p><code>LIKE 'a%'</code> (and similarly for 'e', 'i', 'o', 'u') matches any city name starting with the specified vowel.</p> </li> <li> <p><code>ORDER BY CITY</code>:</p> </li> <li>Orders the resulting list of city names in ascending alphabetical order.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_10","title":"Result","text":"<p>Produces a list of unique city names from the <code>STATION</code> table that begin with a vowel, sorted alphabetically. This query is useful for identifying geographical locations with names that start with vowels, possibly for categorization or analysis based on naming conventions.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-queries-for-selecting-cities-starting-with-vowels","title":"Explanation of the SQL Queries for Selecting Cities Starting with Vowels","text":"<p>These SQL queries aim to select distinct city names from the <code>STATION</code> table that start with a vowel (A, E, I, O, U), regardless of case sensitivity. Two approaches are demonstrated to achieve this goal.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#query-1-using-substr-and-in","title":"Query 1: Using <code>SUBSTR</code> and <code>IN</code>","text":"<pre><code>SELECT DISTINCT(CITY) AS DISTINCT_CITY_NAME FROM STATION\nWHERE lower(SUBSTR(city,1,1)) in ('a','e','i','o','u');\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_11","title":"Objective","text":"<p>To fetch distinct city names from the <code>STATION</code> table where the first letter is a vowel.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_11","title":"Explanation","text":"<ul> <li> <p><code>SELECT DISTINCT(CITY) AS DISTINCT_CITY_NAME</code>: Selects unique city names, preventing duplicate entries. The result column is aliased as <code>DISTINCT_CITY_NAME</code> for clarity.</p> </li> <li> <p><code>WHERE lower(SUBSTR(city,1,1)) in ('a','e','i','o','u')</code>: Filters cities based on their starting character.</p> </li> <li><code>SUBSTR(city,1,1)</code> extracts the first character of the city name.</li> <li><code>lower()</code> converts this character to lowercase to ensure case-insensitive comparison.</li> <li><code>IN ('a','e','i','o','u')</code> checks if the extracted character is a vowel.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_11","title":"Result","text":"<p>Generates a list of unique city names starting with a vowel, showcasing a method to handle case-insensitive string comparison and character extraction.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#query-2-using-like-with-vowels","title":"Query 2: Using <code>LIKE</code> with Vowels","text":"<pre><code>SELECT DISTINCT CITY FROM STATION\nWHERE lcase(CITY) LIKE 'a%'\nOR lcase(CITY) LIKE 'e%'\nOR lcase(CITY) LIKE 'i%'\nOR lcase(CITY) LIKE 'o%'\nOR lcase(CITY) LIKE 'u%'\nORDER BY CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_12","title":"Objective","text":"<p>Similarly, this aims to list unique city names that start with a vowel, applying pattern matching.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_12","title":"Explanation","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: Retrieves unique city names from the <code>STATION</code> table.</p> </li> <li> <p><code>WHERE lcase(CITY) LIKE 'a%' OR lcase(CITY) LIKE 'e%' ...</code>: The <code>WHERE</code> clause uses <code>lcase()</code> to convert city names to lowercase, then applies <code>LIKE</code> to filter names beginning with each vowel. This approach checks each vowel pattern individually.</p> </li> <li> <p><code>ORDER BY CITY</code>: Orders the resulting city names in ascending alphabetical order.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_12","title":"Result","text":"<p>Provides a list of distinct city names starting with a vowel, sorted alphabetically. This method demonstrates the use of pattern matching (<code>LIKE</code>) combined with case conversion for case-insensitive comparisons.</p> <p>Both queries effectively retrieve city names starting with vowels from a specified table, showcasing two different techniques: string manipulation with <code>SUBSTR</code> and pattern matching with <code>LIKE</code>.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-selecting-cities-ending-with-vowels","title":"Explanation of the SQL Query for Selecting Cities Ending with Vowels","text":"<p>This SQL query aims to select distinct city names from the <code>STATION</code> table that end with a vowel (A, E, I, O, U), ensuring a case-insensitive search. It demonstrates how to utilize pattern matching with the SQL <code>LIKE</code> operator, combined with string functions to achieve the desired filtering.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query","title":"SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION\nWHERE lcase(CITY) LIKE '%a'\nOR lcase(CITY) LIKE '%e'\nOR lcase(CITY) LIKE '%i'\nOR lcase(CITY) LIKE '%o'\nOR lcase(CITY) LIKE '%u'\nORDER BY CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_13","title":"Objective","text":"<p>To fetch distinct city names that end with a vowel, from the <code>STATION</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_13","title":"Explanation","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: Retrieves unique city names from the <code>STATION</code> table to prevent duplicate entries in the result set.</p> </li> <li> <p><code>WHERE lcase(CITY) LIKE '%a' OR lcase(CITY) LIKE '%e' ...</code>: The <code>WHERE</code> clause filters the city names based on their ending character:</p> </li> <li><code>lcase(CITY)</code> converts the city names to lowercase to ensure case-insensitive comparison.</li> <li> <p><code>LIKE '%a'</code> (and similar patterns for other vowels) checks if the city name ends with the specified vowel. The percent sign (<code>%</code>) acts as a wildcard that matches any sequence of characters, ensuring that the query looks for names ending with a vowel.</p> </li> <li> <p><code>ORDER BY CITY</code>: Orders the resulting city names in ascending alphabetical order, ensuring that the output is sorted for easier readability.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_13","title":"Result","text":"<p>The query produces a list of unique city names that end with a vowel, sorted alphabetically. This outcome highlights cities within the database that comply with the specified vowel-ending criteria, showcasing effective use of pattern matching and case manipulation in SQL for text-based filtering.</p> <p>This method efficiently retrieves city names adhering to a specific pattern (ending with vowels) and showcases SQL's flexibility in handling string patterns and case sensitivity through simple yet powerful clauses.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-selecting-cities-not-starting-with-vowels","title":"Explanation of the SQL Query for Selecting Cities Not Starting with Vowels","text":"<p>This SQL query retrieves a list of unique city names from the <code>STATION</code> table, specifically focusing on those cities whose names do not start with a vowel (a, e, i, o, u), irrespective of case.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_1","title":"SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION\nWHERE lcase(CITY) NOT LIKE 'a%'\nAND lcase(CITY) NOT LIKE 'e%'\nAND lcase(CITY) NOT LIKE 'i%'\nAND lcase(CITY) NOT LIKE 'o%'\nAND lcase(CITY) NOT LIKE 'u%'\nORDER BY CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_14","title":"Objective","text":"<p>The aim is to extract distinct city names that begin with consonants, ensuring a case-insensitive comparison by using the <code>lcase</code> function to convert city names to lowercase.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components","title":"Key Components","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: Selects unique city names, ensuring no duplicates in the output. The <code>DISTINCT</code> keyword filters out duplicate entries for city names.</p> </li> <li> <p><code>WHERE lcase(CITY) NOT LIKE 'x%'</code>: The <code>WHERE</code> clause filters the city names based on their starting character:</p> </li> <li><code>lcase(CITY)</code>: Converts the city name to lowercase for case-insensitive comparison.</li> <li> <p><code>NOT LIKE 'x%'</code>: Ensures that the selected city names do not start with a specified character (<code>x</code> here represents each vowel). The <code>%</code> wildcard matches any sequence of characters following the initial letter.</p> </li> <li> <p><code>AND</code>: Combines multiple conditions, requiring that all conditions be met. It ensures that the city name does not start with any of the vowels, a, e, i, o, or u.</p> </li> <li> <p><code>ORDER BY CITY</code>: Sorts the resulting list of city names in ascending alphabetical order, making the output easier to read and analyze.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_14","title":"Result","text":"<p>The query produces a sorted list of city names that do not begin with any vowel, filtered in a case-insensitive manner. This approach is useful for scenarios requiring a selection of city names based on specific initial character criteria, demonstrating SQL's capabilities for string manipulation and pattern matching to refine data retrieval.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-selecting-city-names-not-ending-with-vowels","title":"Explanation of the SQL Query for Selecting City Names Not Ending with Vowels","text":"<p>This SQL query is designed to retrieve a unique list of city names from the <code>STATION</code> table, focusing specifically on those cities whose names do not end with a vowel (a, e, i, o, u). The query ensures a case-insensitive comparison to cater to all variations in city name capitalizations.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_2","title":"SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION\nWHERE lcase(CITY) NOT LIKE '%a'\nAND lcase(CITY) NOT LIKE '%e'\nAND lcase(CITY) NOT LIKE '%i'\nAND lcase(CITY) NOT LIKE '%o'\nAND lcase(CITY) NOT LIKE '%u'\nORDER BY CITY;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_15","title":"Objective","text":"<p>The goal is to filter out and list distinct city names that conclude with consonants rather than vowels, applying a case-insensitive search to accommodate all city name cases in the database.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_1","title":"Key Components","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: This portion of the query is responsible for selecting unique city names from the <code>CITY</code> column in the <code>STATION</code> table. The <code>DISTINCT</code> keyword is crucial here as it ensures that each city name appears only once in the result set, eliminating any duplicates.</p> </li> <li> <p><code>WHERE lcase(CITY) NOT LIKE '%x'</code>: The <code>WHERE</code> clause is utilized to apply multiple conditions that the city names must meet:</p> </li> <li><code>lcase(CITY)</code>: Converts the city name to lowercase. This function is used to perform a case-insensitive comparison.</li> <li> <p><code>NOT LIKE '%x'</code>: Specifies that the selected city names must not end with a vowel. The <code>%</code> symbol is a wildcard that matches any sequence of characters, and <code>x</code> represents each vowel. The combination of these conditions ensures that cities ending in vowels are excluded from the results.</p> </li> <li> <p><code>AND</code>: This logical operator is used to chain all the conditions together. It ensures that the city name must not end with any of the specified vowels to be included in the result set.</p> </li> <li> <p><code>ORDER BY CITY</code>: Orders the final list of city names in ascending alphabetical order. This sorting makes the output more organized and easier to analyze.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_15","title":"Result","text":"<p>The output is a neatly organized, alphabetically sorted list of distinct city names that do not end with any of the vowels (a, e, i, o, u), considering all possible case variations of city names. This specific filtering showcases the power of SQL for performing pattern matching and string manipulation to achieve precise data selection criteria.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-selecting-city-names-not-starting-or-ending-with-vowels","title":"Explanation of the SQL Query for Selecting City Names Not Starting or Ending with Vowels","text":"<p>This SQL query retrieves a unique list of city names from the <code>STATION</code> table that either do not start with a vowel (a, e, i, o, u) or do not end with a vowel. The use of a regular expression (regexp) provides a powerful way to apply complex pattern-matching directly within the SQL query.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_3","title":"SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiou]' OR CITY NOT REGEXP '[aeiou]$';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_16","title":"Objective","text":"<p>To filter and list distinct city names that either begin with a consonant or end with a consonant, excluding any city names that both start and end with a vowel.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_2","title":"Key Components","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: Selects unique city names from the <code>CITY</code> column, ensuring no duplicates in the output.</p> </li> <li> <p><code>FROM STATION</code>: Indicates the data source, the <code>STATION</code> table, from which city names are to be fetched.</p> </li> <li> <p><code>WHERE CITY NOT REGEXP '^[aeiou]' OR CITY NOT REGEXP '[aeiou]$'</code>:</p> </li> <li>This condition uses the <code>NOT REGEXP</code> operator to filter city names against two regular expressions:<ul> <li><code>'^[aeiou]'</code>: Matches city names that start with a vowel. The caret (<code>^</code>) symbol represents the start of the string. <code>NOT REGEXP</code> inverts the match, excluding these city names.</li> <li><code>'[aeiou]$'</code>: Matches city names that end with a vowel. The dollar sign (<code>$</code>) denotes the end of the string. Again, <code>NOT REGEXP</code> inverts the match to exclude such names.</li> </ul> </li> <li>The <code>OR</code> operator between these conditions ensures that city names are selected if they fail to match at least one of these patterns (i.e., either start or end with a consonant).</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_16","title":"Result","text":"<p>The output will be an alphabetically unordered list of distinct city names from the <code>STATION</code> table that do not strictly adhere to vowel start and end conventions. This query effectively captures a broader range of city names by focusing on those that either start or end with consonants, showcasing the versatility of SQL in handling complex string pattern matching and logical conditions.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-selecting-city-names-neither-starting-nor-ending-with-vowels","title":"Explanation of the SQL Query for Selecting City Names Neither Starting nor Ending with Vowels","text":"<p>This SQL query aims to fetch a unique list of city names from the <code>STATION</code> table, specifically focusing on those city names that neither start with a vowel (a, e, i, o, u) nor end with a vowel. This particular query leverages the power of regular expressions within SQL to succinctly apply pattern matching for both the beginning and end of city names.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_4","title":"SQL Query","text":"<pre><code>SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiou]' AND CITY NOT REGEXP '[aeiou]$';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_17","title":"Objective","text":"<p>The goal is to filter out and list distinct city names that start and end with consonants, excluding all city names that either start with a vowel or end with a vowel.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_3","title":"Key Components","text":"<ul> <li> <p><code>SELECT DISTINCT CITY</code>: This clause selects unique (no duplicates) city names from the <code>CITY</code> column in the <code>STATION</code> table.</p> </li> <li> <p><code>FROM STATION</code>: Specifies the <code>STATION</code> table as the data source for the query.</p> </li> <li> <p><code>WHERE CITY NOT REGEXP '^[aeiou]' AND CITY NOT REGEXP '[aeiou]$'</code>:</p> </li> <li>The condition uses <code>NOT REGEXP</code> to exclude city names based on two criteria:<ul> <li><code>'^[aeiou]'</code>: This pattern identifies city names that start with a vowel. The caret (<code>^</code>) symbolizes the start of the string. <code>NOT REGEXP</code> reverses the match to exclude cities starting with vowels.</li> <li><code>'[aeiou]$'</code>: This pattern pinpoints city names ending with a vowel. The dollar sign (<code>$</code>) signifies the end of the string. Using <code>NOT REGEXP</code> here excludes cities ending with vowels.</li> </ul> </li> <li>The <code>AND</code> logical operator ensures that both conditions must be met for a city name to be included in the results. Thus, only city names that neither start with a vowel nor end with a vowel are selected.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#result_17","title":"Result","text":"<p>The result of this query is a list of distinct city names from the <code>STATION</code> table that start and end with consonants, effectively filtering out any city names that don't match both criteria. This approach highlights the flexibility of SQL in handling precise string pattern exclusions and showcases how regular expressions can significantly enhance querying capabilities for specific pattern matching.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-products-sold-only-in-the-first-quarter-of-2019","title":"Explanation of the SQL Query for Products Sold Only in the First Quarter of 2019","text":"<p>This SQL query is designed to identify and report products from the <code>Product</code> table that were exclusively sold in the first quarter of 2019, specifically between January 1st, 2019, and March 31st, 2019.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure","title":"SQL Query Structure","text":"<pre><code>SELECT product_id, product_name\nFROM   Product\nWHERE  product_id NOT IN (\n    SELECT product_id\n    FROM Sales\n    WHERE sale_date &lt; '2019-01-01' OR sale_date &gt; '2019-03-31'\n);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_18","title":"Objective","text":"<p>The main goal of this query is to filter out and list the products that were only sold during the first quarter (Q1) of 2019. This period is defined from January 1st to March 31st, inclusive.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_4","title":"Key Components","text":"<ul> <li> <p><code>SELECT product_id, product_name FROM Product</code>: This part of the query selects the <code>product_id</code> and <code>product_name</code> columns from the <code>Product</code> table, aiming to retrieve the details of the relevant products.</p> </li> <li> <p><code>WHERE product_id NOT IN (...)</code>: The <code>WHERE</code> clause is used to exclude certain products based on their <code>product_id</code>. The <code>NOT IN</code> operator is crucial here, as it filters out products that do not meet the specified criteria.</p> </li> <li> <p>Subquery:</p> </li> <li><code>SELECT product_id FROM Sales WHERE sale_date &lt; '2019-01-01' OR sale_date &gt; '2019-03-31'</code>: The subquery selects <code>product_id</code> from the <code>Sales</code> table where the <code>sale_date</code> is either before January 1st, 2019, or after March 31st, 2019. This effectively identifies products sold outside the first quarter of 2019.</li> <li>The purpose of this subquery is to create a list of product IDs that were sold either before or after the Q1 of 2019, thereby excluding them from the final result.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result","title":"Logic and Result","text":"<p>The query uses the subquery to identify products that were sold outside the specified Q1 2019 period and then uses <code>NOT IN</code> to exclude those products from the result set. Therefore, the main query's result includes only those products from the <code>Product</code> table whose IDs were not found in the subquery's result \u2014 i.e., products sold exclusively within the first quarter of 2019.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output","title":"Final Output","text":"<p>The final output of this query lists the <code>product_id</code> and <code>product_name</code> of products that were strictly sold within the first quarter of 2019, fulfilling the specified criteria. Based on the provided data and criteria, the expected output would be the product(s) that match these conditions, specifically highlighting those that were popular or available only in the early part of the year.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-authors-viewing-their-own-articles","title":"Explanation of the SQL Query for Authors Viewing Their Own Articles","text":"<p>This SQL query aims to identify authors who have viewed at least one of their own articles. The context is based on a database table named <code>Views</code> that tracks which viewer has viewed which article on a specific date. It's noted that the <code>author_id</code> and <code>viewer_id</code> can be the same, indicating that an author has viewed their own article.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_1","title":"SQL Query Structure","text":"<pre><code>SELECT DISTINCT author_id AS id\nFROM   Views\nWHERE  author_id = viewer_id\nORDER BY author_id ASC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_19","title":"Objective","text":"<p>The primary goal is to find all authors who have, at least once, viewed their own articles, as recorded in the <code>Views</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_5","title":"Key Components","text":"<ul> <li> <p><code>SELECT DISTINCT author_id AS id</code>: This part of the query selects unique author IDs from the <code>Views</code> table. The <code>DISTINCT</code> keyword ensures that each author ID is listed only once in the result, regardless of how many times they've viewed their own articles. The <code>AS id</code> part renames the output column to <code>id</code> for clarity or to meet specific result format requirements.</p> </li> <li> <p><code>FROM Views</code>: Specifies that the data is being retrieved from the <code>Views</code> table.</p> </li> <li> <p><code>WHERE author_id = viewer_id</code>: This condition filters the rows to include only those where the <code>author_id</code> matches the <code>viewer_id</code>, meaning it only includes instances where authors have viewed their own articles.</p> </li> <li> <p><code>ORDER BY author_id ASC</code>: Orders the resulting list of unique author IDs in ascending order. This ensures that the output is organized from the lowest to the highest author ID, making it easier to read or process further.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_1","title":"Logic and Result","text":"<p>The query works by comparing the <code>author_id</code> and <code>viewer_id</code> within the <code>Views</code> table. If these two IDs match, it indicates that an author has viewed their own article. By selecting distinct <code>author_id</code>s and ordering them in ascending order, the query produces a clean, sorted list of authors who have engaged with their content directly.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_1","title":"Final Output","text":"<p>The output is a list of <code>author_id</code>s (renamed to <code>id</code> in the result set) who have viewed their own articles. This list is unique and sorted in ascending order, providing a straightforward overview of self-engaging authors within the platform or dataset.</p> <p>This information can be particularly useful for content platforms aiming to understand author engagement with their platform or for analysts looking to study user behavior within a content-driven website.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-calculating-percentage-of-immediate-orders","title":"Explanation of the SQL Query for Calculating Percentage of Immediate Orders","text":"<p>This SQL query is designed to calculate the percentage of orders that are classified as \"immediate\" within the <code>Delivery</code> table of a database. An order is considered immediate if the customer's preferred delivery date is the same as the order date.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_2","title":"SQL Query Structure","text":"<pre><code>SELECT ROUND(100 * d2.immediate_orders / COUNT(d1.delivery_id), 2) AS immediate_percentage\nFROM Delivery d1,\n     (SELECT COUNT(order_date) AS immediate_orders\n      FROM Delivery\n      WHERE order_date = customer_pref_delivery_date) d2;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_20","title":"Objective","text":"<p>To determine the percentage of orders that are fulfilled immediately, meaning the order date and the customer's preferred delivery date are the same.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_6","title":"Key Components","text":"<ul> <li> <p><code>ROUND(100 * d2.immediate_orders / COUNT(d1.delivery_id), 2) AS immediate_percentage</code>: This part calculates the percentage of immediate orders by dividing the count of immediate orders by the total number of orders, then multiplying by 100 to convert it into a percentage. The <code>ROUND</code> function rounds the result to 2 decimal places. The result is aliased as <code>immediate_percentage</code>.</p> </li> <li> <p><code>FROM Delivery d1</code>: Refers to the <code>Delivery</code> table, aliased as <code>d1</code>, used here to calculate the total number of deliveries.</p> </li> <li> <p><code>SELECT COUNT(order_date) AS immediate_orders FROM Delivery WHERE order_date = customer_pref_delivery_date</code>: This subquery (aliased as <code>d2</code>) calculates the count of immediate orders by selecting orders where the order date and the customer's preferred delivery date are identical.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_2","title":"Logic and Result","text":"<p>The query operates in two main steps: 1. The subquery (<code>d2</code>) identifies and counts all orders where the order date matches the customer's preferred delivery date, classifying them as immediate orders. 2. The main query calculates the total number of orders in the <code>Delivery</code> table and uses the count of immediate orders from <code>d2</code> to compute the percentage of immediate orders. This percentage is calculated as the number of immediate orders divided by the total number of orders, then multiplied by 100 for a percentage value, rounded to two decimal places for readability.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_2","title":"Final Output","text":"<p>The output of this query is a single value named <code>immediate_percentage</code>, representing the percentage of orders that were processed on the same day as requested by the customer. This metric can be particularly insightful for a business analyzing its order processing efficiency or customer satisfaction relating to delivery times.</p> <p>This calculation provides a clear insight into the operational aspect of the delivery service, indicating how often customers' immediate needs are met directly as per their initial order request.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-calculating-ad-ctr-click-through-rate","title":"Explanation of the SQL Query for Calculating Ad CTR (Click-Through Rate)","text":"<p>This SQL query calculates the Click-Through Rate (CTR) of each advertisement in a database table named <code>Ads</code>. The CTR is an essential metric in digital advertising that measures the effectiveness of an ad campaign by dividing the number of clicks an ad receives by the number of times it's shown (views), expressed as a percentage.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_3","title":"SQL Query Structure","text":"<pre><code>SELECT ad_id,\nIFNULL(\n    ROUND(\n        AVG(\n            CASE\n                WHEN action = \"Clicked\" THEN 1\n                WHEN action = \"Viewed\" THEN 0\n                ELSE NULL\n            END\n        ) * 100,\n        2\n    ),\n    0\n) AS ctr\nFROM Ads\nGROUP BY ad_id\nORDER BY ctr DESC, ad_id ASC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_21","title":"Objective","text":"<p>The goal is to compute the CTR for each ad, rounded to two decimal places, and to order the results by CTR in descending order. In case of ties in CTR values, the ads are further ordered by their <code>ad_id</code> in ascending order.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_7","title":"Key Components","text":"<ul> <li> <p><code>SELECT ad_id, IFNULL(ROUND(AVG(...), 2), 0) AS ctr</code>: This part of the query selects the <code>ad_id</code> and calculates the CTR. The <code>IFNULL</code> function ensures that if the <code>AVG</code> function returns <code>NULL</code> (which might happen if there are no \"Clicked\" or \"Viewed\" actions for an ad), it defaults to <code>0</code>.</p> </li> <li> <p><code>CASE</code> Statement: Inside the <code>AVG</code> function, a <code>CASE</code> statement assigns a value of <code>1</code> for \"Clicked\" actions and <code>0</code> for \"Viewed\" actions. These values are used to calculate the average, essentially computing the CTR since only clicks and views are relevant (ignores are excluded).</p> </li> <li> <p><code>GROUP BY ad_id</code>: This groups the results by <code>ad_id</code>, ensuring that the CTR is calculated for each ad separately.</p> </li> <li> <p><code>ORDER BY ctr DESC, ad_id ASC</code>: Orders the results first by CTR in descending order (so the highest CTRs are listed first) and then by <code>ad_id</code> in ascending order in case of a tie in CTR values.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_3","title":"Logic and Result","text":"<p>The query leverages the <code>AVG</code> function to calculate the CTR by interpreting clicks as <code>1</code> and views as <code>0</code>, ignoring any other actions. By averaging these values, we effectively get the percentage of clicks per ad (since a click contributes a whole count <code>1</code>, and a view contributes <code>0</code>). Multiplying by 100 and rounding to two decimal places gives us the CTR percentage.</p> <p>Finally, the <code>IFNULL</code> check ensures that ads without any clicks or views are given a <code>0</code> CTR rather than resulting in a <code>NULL</code> CTR.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_3","title":"Final Output","text":"<p>The output is a list of <code>ad_id</code>s along with their respective CTRs, where each CTR is rounded to two decimal points. This list is ordered with the highest CTRs at the top. For ads with the same CTR, they are ordered by their <code>ad_id</code> in ascending order. This provides a clear ranking of ads based on their effectiveness in engaging users through clicks compared to views.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-sql-query-for-finding-team-sizes","title":"Explanation of the SQL Query for Finding Team Sizes","text":"<p>This SQL query calculates the team size for each employee in a table named <code>Employee</code>. Each row in the <code>Employee</code> table represents an employee, identified by <code>employee_id</code>, and indicates the team they belong to with <code>team_id</code>.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_4","title":"SQL Query Structure","text":"<pre><code>SELECT employee_id,\n       COUNT(*) OVER(PARTITION BY team_id) AS team_size\nFROM Employee\nORDER BY team_size DESC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_22","title":"Objective","text":"<p>The goal is to determine the size of the team to which each employee belongs. The result should display each employee's ID along with their respective team's size.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_8","title":"Key Components","text":"<ul> <li> <p><code>SELECT employee_id, COUNT(*) OVER(PARTITION BY team_id) AS team_size</code>: This part of the query selects the <code>employee_id</code> and calculates the size of each team using a window function. </p> </li> <li> <p><code>COUNT(*) OVER(PARTITION BY team_id)</code>: The <code>COUNT(*)</code> function counts the number of rows in each partition, which, in this case, is defined by <code>team_id</code>. This means it calculates the number of employees in each team. The <code>OVER(PARTITION BY team_id)</code> clause specifies that the count should be reset and recalculated for each team.</p> </li> <li> <p><code>ORDER BY team_size DESC</code>: This orders the results by <code>team_size</code> in descending order, meaning teams with more members are listed first. This part is especially useful for quickly identifying the largest teams.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_4","title":"Logic and Result","text":"<p>The query leverages a window function (<code>COUNT(*) OVER(...)</code>) to count the number of employees within each <code>team_id</code> group, effectively determining each team's size. This count is performed across all rows that share the same <code>team_id</code> as the current row, hence providing the size of the team for each employee.</p> <p>By using the window function, we can maintain the granularity of the original table\u2014keeping each employee's record separate\u2014while augmenting it with the team size information. This approach avoids the need to group the table by <code>team_id</code> and then join it back to the original <code>Employee</code> table to associate each employee with their team's size.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_4","title":"Final Output","text":"<p>The final output is a list of employees, represented by their <code>employee_id</code>, alongside the size of their respective teams (<code>team_size</code>). This list is ordered by team size in descending order, which helps in quickly seeing the employees from the largest teams. This information is crucial for understanding team distributions and can inform decisions related to resource allocation, team management, and organizational structure.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q22-explanation-of-the-sql-query-for-weather-type-by-country-in-november-2019","title":"Q22. Explanation of the SQL Query for Weather Type by Country in November 2019","text":"<p>This SQL query aims to determine the type of weather experienced in each country during November 2019. It uses two tables: <code>Countries</code> and <code>Weather</code>. The <code>Countries</code> table contains information about countries, including their <code>country_id</code> and <code>country_name</code>, while the <code>Weather</code> table records the weather conditions for each country, identified by <code>country_id</code>, on specific days (<code>day</code>) along with the weather state (<code>weather_state</code>).</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_5","title":"SQL Query Structure","text":"<pre><code>SELECT c.country_name,\n       CASE\n           WHEN AVG(w.weather_state * 1.0) &lt;= 15 THEN 'Cold'\n           WHEN AVG(w.weather_state * 1.0) &gt;= 25 THEN 'Hot'\n           ELSE 'Warm'\n       END AS weather_type\nFROM Countries AS c\nINNER JOIN Weather w ON c.country_id = w.country_id\nWHERE w.day BETWEEN '2019-11-01' AND '2019-11-30'\nGROUP BY c.country_id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_23","title":"Objective","text":"<p>To categorize and report the average weather condition for each country in November 2019 as 'Cold', 'Hot', or 'Warm'.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_9","title":"Key Components","text":"<ul> <li> <p><code>SELECT c.country_name, CASE ... END AS weather_type</code>: This selects each country's name and uses a <code>CASE</code> statement to determine the weather type based on the average weather state.</p> </li> <li> <p><code>INNER JOIN Weather w ON c.country_id = w.country_id</code>: This joins the <code>Countries</code> and <code>Weather</code> tables on <code>country_id</code> to correlate each country's name with its weather data.</p> </li> <li> <p><code>WHERE w.day BETWEEN '2019-11-01' AND '2019-11-30'</code>: Filters records to include only those from November 2019, ensuring the analysis is scoped correctly.</p> </li> <li> <p><code>GROUP BY c.country_id</code>: Groups the results by country, which is necessary for calculating the average weather state per country.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_5","title":"Logic and Result","text":"<p>The query first filters the weather data to include only entries from November 2019. It then calculates the average <code>weather_state</code> for each country during this period. Based on these averages, countries are classified as experiencing 'Cold' weather (average weather state \u2264 15), 'Hot' weather (average weather state \u2265 25), or 'Warm' weather for averages that fall between these thresholds.</p> <p>The use of <code>AVG(w.weather_state * 1.0)</code> ensures that the division is performed in floating-point arithmetic, allowing for a more accurate calculation of the average weather state.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_5","title":"Final Output","text":"<p>The output is a list of countries, as identified in the <code>Countries</code> table, alongside their categorized weather conditions ('Cold', 'Hot', or 'Warm') for November 2019. This information can be valuable for understanding climate patterns, planning travel, or conducting geographical and environmental research.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q23-finding-the-average-selling-price-for-each-product","title":"Q23. Finding the Average Selling Price for Each Product","text":"<p>This SQL query aims to calculate the average selling price for each product based on units sold and the price at which they were sold during specific periods. It involves two tables: <code>Prices</code>, which stores price information for each product within certain date ranges, and <code>UnitsSold</code>, which records the units of products sold on specific dates.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_6","title":"SQL Query Structure","text":"<pre><code>SELECT a.product_id,\n       ROUND(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price\nFROM UnitsSold a\nJOIN Prices b ON (a.product_id = b.product_id\n                  AND a.purchase_date &gt;= b.start_date\n                  AND a.purchase_date &lt;= b.end_date)\nGROUP BY a.product_id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_24","title":"Objective","text":"<p>The main goal is to determine the weighted average selling price of each product. The average considers the number of units sold and their selling price within the valid date range of the <code>Prices</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_10","title":"Key Components","text":"<ul> <li><code>SELECT a.product_id, ROUND(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price</code>:</li> <li> <p>This command selects the product ID and calculates the weighted average selling price, rounded to two decimal places. It multiplies the units sold by the price and then divides the total by the sum of units sold for each product.</p> </li> <li> <p><code>FROM UnitsSold a JOIN Prices b</code>:</p> </li> <li> <p>The query joins the <code>UnitsSold</code> and <code>Prices</code> tables based on product ID and the condition that the sale date falls within the valid price date range.</p> </li> <li> <p><code>ON (a.product_id = b.product_id AND a.purchase_date &gt;= b.start_date AND a.purchase_date &lt;= b.end_date)</code>:</p> </li> <li> <p>Specifies the join condition to ensure that only sales within the price-effective date range are considered.</p> </li> <li> <p><code>GROUP BY a.product_id</code>:</p> </li> <li>Groups the results by product ID to calculate the average price per product.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_6","title":"Logic and Result","text":"<p>The query performs a weighted average calculation where the total sales value of each product (units sold times price) is divided by the total units sold, ensuring that the average price reflects the proportion of units sold at different prices.</p> <p>This method accounts for price variations within the specified date ranges and provides an accurate representation of the average selling price for each product.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_6","title":"Final Output","text":"<p>The final output is a list of product IDs alongside their calculated average selling price. This information is crucial for understanding pricing strategies, evaluating product performance, and making informed business decisions related to inventory management and sales forecasting.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q24-reporting-the-first-login-date-for-each-player","title":"Q24. Reporting the First Login Date for Each Player","text":"<p>This SQL query aims to identify the first login date for each player in the <code>Activity</code> table. The table records various activities of players, including their login dates and the number of games played on those dates.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-structure_7","title":"SQL Query Structure","text":"<pre><code>SELECT tmp.player_id, tmp.event_date AS first_login\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) AS row_num\n    FROM Activity\n) tmp\nWHERE tmp.row_num = 1;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_25","title":"Objective","text":"<p>The primary goal is to extract the earliest login date for each player, considering that a player might have multiple entries in the <code>Activity</code> table for different login sessions.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_11","title":"Key Components","text":"<ul> <li><code>ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date)</code>:</li> <li> <p>This window function assigns a unique row number to each row within a partition of <code>player_id</code>, ordered by <code>event_date</code> in ascending order. Thus, the first login date for each player gets the row number 1.</p> </li> <li> <p><code>FROM Activity</code>:</p> </li> <li> <p>Specifies the <code>Activity</code> table as the source of the data.</p> </li> <li> <p><code>tmp</code> (Subquery Alias):</p> </li> <li> <p>The subquery generates a temporary result set that includes all columns from the <code>Activity</code> table, plus an additional column (<code>row_num</code>) indicating the row number assigned by the window function.</p> </li> <li> <p><code>WHERE tmp.row_num = 1</code>:</p> </li> <li>Filters the results to include only those rows where <code>row_num</code> equals 1, which corresponds to the earliest login event for each player.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_7","title":"Logic and Result","text":"<p>By partitioning the <code>Activity</code> table's records by <code>player_id</code> and ordering these partitions by <code>event_date</code>, the query can effectively identify the first login attempt made by each player. Using the <code>ROW_NUMBER()</code> function ensures that each login event is uniquely numbered within its partition.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_7","title":"Final Output","text":"<p>The output of this query is a table with two columns: <code>player_id</code> and <code>first_login</code>. Each row represents a player and the date of their first login. This information can be crucial for analyzing player engagement, retention strategies, and understanding how players interact with the game over time.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q25-reporting-the-first-device-logged-in-for-each-player","title":"Q25. Reporting the First Device Logged in for Each Player","text":"<p>This SQL query is designed to identify the first device each player used to log into an activity tracking system. The <code>Activity</code> table records each login instance, including the player ID, device ID, and event date.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_5","title":"SQL Query","text":"<pre><code>SELECT\n    tmp.player_id,\n    tmp.device_id\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS row_num\n    FROM Activity\n) tmp\nWHERE tmp.row_num = 1;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_26","title":"Objective","text":"<p>The main goal is to find the initial device from which each player logged in by examining the <code>Activity</code> table, focusing on the earliest event date for each player.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_12","title":"Key Components","text":"<ul> <li><code>SELECT *, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS row_num</code>:</li> <li> <p>This subquery assigns a row number to each record within partitions of the same <code>player_id</code>, ordered by <code>event_date</code> in ascending order. This means the first login (earliest date) for each player gets <code>row_num</code> 1.</p> </li> <li> <p><code>FROM Activity</code>:</p> </li> <li> <p>Specifies the <code>Activity</code> table as the source of data.</p> </li> <li> <p><code>WHERE tmp.row_num = 1</code>:</p> </li> <li>The outer query filters the results to include only those rows where <code>row_num</code> is 1, effectively selecting the record of the first login for each player.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_8","title":"Logic and Result","text":"<p>The query uses a window function (<code>ROW_NUMBER()</code>) to rank login events for each player based on the date. By partitioning these rankings by <code>player_id</code> and ordering by <code>event_date</code>, it ensures that each player's earliest login event is identified. Filtering to <code>row_num = 1</code> then isolates these first login records.</p> <p>This technique allows us to efficiently pinpoint the first device used by each player without having to manually sift through potentially numerous login records.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_8","title":"Final Output","text":"<p>The final output presents a list of player IDs alongside the ID of the device from which they first logged in. This information is invaluable for analyzing user behavior, understanding device preferences among the player base, and potentially tailoring the gaming experience to accommodate popular devices.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q26-identifying-products-with-at-least-100-units-ordered-in-february-2020","title":"Q26. Identifying Products with At Least 100 Units Ordered in February 2020","text":"<p>This SQL query focuses on finding the names of products from the <code>Products</code> table that have accumulated at least 100 units in orders during February 2020, as recorded in the <code>Orders</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_6","title":"SQL Query","text":"<pre><code>SELECT a.product_name, SUM(unit) AS unit\nFROM Products a\nLEFT JOIN Orders b ON a.product_id = b.product_id\nWHERE b.order_date BETWEEN '2020-02-01' AND '2020-02-29'\nGROUP BY a.product_id\nHAVING SUM(unit) &gt;= 100;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_27","title":"Objective","text":"<p>The aim is to analyze product popularity or demand by identifying which products had significant order volumes (100 units or more) within the specific timeframe of February 2020.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_13","title":"Key Components","text":"<ul> <li><code>LEFT JOIN Orders b ON a.product_id = b.product_id</code>:</li> <li> <p>This join correlates each product with its orders, ensuring all products are considered, even those without any orders.</p> </li> <li> <p><code>WHERE b.order_date BETWEEN '2020-02-01' AND '2020-02-29'</code>:</p> </li> <li> <p>Filters orders to include only those placed in February 2020, focusing the analysis on this period.</p> </li> <li> <p><code>GROUP BY a.product_id</code>:</p> </li> <li> <p>Aggregates orders by product ID, allowing for the calculation of total units ordered per product.</p> </li> <li> <p><code>HAVING SUM(unit) &gt;= 100</code>:</p> </li> <li>After grouping, this condition filters for products where the total ordered units meet or exceed 100, highlighting products with high demand.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_9","title":"Logic and Result","text":"<p>By joining the <code>Products</code> and <code>Orders</code> tables, the query calculates the total units ordered for each product within the specified timeframe. The <code>HAVING</code> clause then isolates those products meeting the 100-unit threshold, directly answering questions about product demand.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_9","title":"Final Output","text":"<p>The output is a list of product names alongside the total units ordered for each, but only for those products meeting the 100-unit criteria in February 2020. This data can guide inventory decisions, marketing strategies, and product development by highlighting what customers are most interested in.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q27-identifying-users-with-valid-emails-from-the-users-table","title":"Q27. Identifying Users with Valid Emails from the <code>Users</code> Table","text":"<p>This SQL query filters the <code>Users</code> table to identify users with valid email addresses according to specific criteria. A valid email, in this context, must have a specific prefix composition and domain.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_7","title":"SQL Query","text":"<pre><code>SELECT *\nFROM Users\nWHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9_\\.\\-]*@leetcode.com');\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_28","title":"Objective","text":"<p>The goal is to ensure data integrity by validating user email formats in the database, specifically targeting emails associated with the \"@leetcode.com\" domain.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_14","title":"Key Components","text":"<ul> <li><code>REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9_\\.\\-]*@leetcode.com')</code>:</li> <li>This condition uses a regular expression to validate email formats.</li> <li>The expression ensures that:<ul> <li>The email starts with a letter (<code>^[a-zA-Z]</code>).</li> <li>The prefix can contain letters, digits, underscores, periods, or dashes (<code>[a-zA-Z0-9_\\.\\-]*</code>).</li> <li>The email domain is exactly \"@leetcode.com\".</li> </ul> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_10","title":"Logic and Result","text":"<p>The query sifts through the <code>mail</code> column of the <code>Users</code> table, applying the regular expression as a filter to find rows where the <code>mail</code> column matches the pattern of a valid email address. This process helps maintain or improve the database's quality by focusing on specific, correctly formatted email data.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_10","title":"Final Output","text":"<p>The output is a list of user records with emails that: - Start with a letter. - Contain only allowed characters in the prefix. - End with the domain \"@leetcode.com\".</p> <p>This filtered view is particularly useful for applications needing to ensure communications are sent to valid, properly formatted email addresses, thus avoiding errors in automated mailing processes.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q28-identifying-customers-who-spent-over-100-in-june-and-july-2020","title":"Q28. Identifying Customers Who Spent Over $100 in June and July 2020","text":"<p>This SQL query cross-references data from <code>Customers</code>, <code>Product</code>, and <code>Orders</code> tables to identify customers who spent at least $100 in both June and July of 2020. It highlights the ability to filter and aggregate data across multiple tables based on specific criteria.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_8","title":"SQL Query","text":"<pre><code>SELECT o.customer_id, c.name\nFROM Customers c, Product p, Orders o\nWHERE c.customer_id = o.customer_id AND p.product_id = o.product_id\nGROUP BY o.customer_id\nHAVING\n    SUM(CASE WHEN o.order_date LIKE '2020-06%' THEN o.quantity * p.price ELSE 0 END) &gt;= 100\nAND\n    SUM(CASE WHEN o.order_date LIKE '2020-07%' THEN o.quantity * p.price ELSE 0 END) &gt;= 100;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_29","title":"Objective","text":"<p>To identify customers who have consistently engaged in significant transactions over the summer months, specifically June and July 2020, by reaching or exceeding a spending threshold of $100 in each month.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_15","title":"Key Components","text":"<ul> <li><code>SUM(CASE WHEN o.order_date LIKE '2020-06%' THEN o.quantity * p.price ELSE 0 END)</code>:</li> <li> <p>This conditional aggregation calculates the total amount spent by each customer in June 2020, multiplying the quantity of each order by the product price.</p> </li> <li> <p><code>SUM(CASE WHEN o.order_date LIKE '2020-07%' THEN o.quantity * p.price ELSE 0 END)</code>:</p> </li> <li> <p>Similarly, it calculates the total spend for July 2020.</p> </li> <li> <p><code>HAVING</code> clause:</p> </li> <li>Filters groups to include only those customers whose total spend in each month meets or exceeds $100.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_11","title":"Logic and Result","text":"<p>The query performs a three-table join to correlate customer IDs and names with their respective orders and the products' prices. It then groups the results by customer ID to aggregate spending per customer. Using the <code>HAVING</code> clause, it filters out any customer whose spending in either June or July 2020 falls below $100, ensuring only those who meet the spending criteria in both months are selected.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_11","title":"Final Output","text":"<p>The output is a list of <code>customer_id</code> and <code>customer_name</code> for those who have spent at least $100 in both June and July 2020. This result set is useful for businesses looking to identify high-value customers for targeted marketing campaigns, rewards, or further analysis on consumer spending habits during specific periods.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q29-reporting-kid-friendly-movies-streamed-in-june-2020","title":"Q29. Reporting Kid-Friendly Movies Streamed in June 2020","text":"<p>This SQL query is designed to find kid-friendly movies that were streamed in June 2020 by joining the <code>Content</code> and <code>TVProgram</code> tables based on the content ID, and then applying specific filters to meet the query criteria.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_9","title":"SQL Query","text":"<pre><code>SELECT DISTINCT title\nFROM Content ctt\nINNER JOIN TVProgram tv\nON ctt.content_id = tv.content_id\nWHERE content_type = 'Movies'\nAND Kids_content = 'Y'\nAND program_date BETWEEN '2020-06-01' AND '2020-06-30';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#objective_30","title":"Objective","text":"<p>To identify movies classified as suitable for children (<code>Kids_content = 'Y'</code>) that were aired in June 2020, ensuring that parents or guardians are provided with information about kid-friendly content available during that period.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#key-components_16","title":"Key Components","text":"<ul> <li><code>INNER JOIN</code>:</li> <li> <p>Combines rows from <code>Content</code> and <code>TVProgram</code> tables based on matching <code>content_id</code> values, linking movie titles to their streaming data.</p> </li> <li> <p><code>WHERE content_type = 'Movies'</code>:</p> </li> <li> <p>Narrows down to entries in the <code>Content</code> table that are specifically categorized as movies.</p> </li> <li> <p><code>AND Kids_content = 'Y'</code>:</p> </li> <li> <p>Further filters the movies to include only those marked as kid-friendly.</p> </li> <li> <p><code>AND program_date BETWEEN '2020-06-01' AND '2020-06-30'</code>:</p> </li> <li>Specifies the streaming dates to focus solely on June 2020.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#logic-and-result_12","title":"Logic and Result","text":"<p>By joining the <code>Content</code> and <code>TVProgram</code> tables, the query fetches titles of movies categorized as suitable for kids. It ensures that only the movies streamed in June 2020 are selected, offering a concise list for users seeking child-appropriate content aired during that month.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#final-output_12","title":"Final Output","text":"<p>The output is a list of unique titles for kid-friendly movies streamed in June 2020. This information can be valuable for content providers to assess the reach of their kid-oriented programming and for parents seeking suitable entertainment options for their children during specific time frames.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q30-matching-npv-values-with-queries","title":"Q30. Matching NPV Values with Queries","text":"<p>The purpose of this SQL setup is to create and populate two tables, <code>NPV</code> and <code>Queries</code>, and prepare for a query that matches net present value (NPV) data from the <code>NPV</code> table with specific queries in the <code>Queries</code> table based on their <code>id</code> and <code>year</code>.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#creating-and-populating-tables","title":"Creating and Populating Tables","text":"<ul> <li> <p><code>NPV</code> Table Creation:   </p><pre><code>CREATE TABLE IF NOT EXISTS NPV\n(\n    id int,\n    year int,\n    npv int,\n    CONSTRAINT pk PRIMARY KEY (id, year)\n);\n</code></pre>   This command creates the <code>NPV</code> table with <code>id</code> and <code>year</code> as a composite primary key, ensuring each record has a unique combination of <code>id</code> and <code>year</code>. </li> <li> <p>Inserting Data into <code>NPV</code>:   </p><pre><code>INSERT INTO NPV VALUES\n(1,2018,100),(7,2020,30),(13,2019,40),(1,2019,113),(2,2008,121),(3,2009,12),(11,2020,99),(7,2019,0);\n</code></pre>   Inserts records into the <code>NPV</code> table, representing the net present value for various projects (<code>id</code>) across different years. </li> <li> <p><code>Queries</code> Table Creation:   </p><pre><code>CREATE TABLE IF NOT EXISTS Queries\n(\n    id int,\n    year int,\n    CONSTRAINT pk PRIMARY KEY (id, year)\n);\n</code></pre>   Creates the <code>Queries</code> table, similarly using <code>id</code> and <code>year</code> as a composite primary key for uniqueness. </li> <li> <p>Inserting Data into <code>Queries</code>:   </p><pre><code>INSERT INTO Queries VALUES (1, 2019),(2, 2008),(3, 2009),(7, 2018),(7, 2019),(7, 2020),(13, 2019);\n</code></pre>   Populates the <code>Queries</code> table with specific <code>id</code> and <code>year</code> combinations for which NPV values are to be retrieved. </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#expected-outcome","title":"Expected Outcome","text":"<p>The setup is designed to facilitate SQL queries that can extract NPV data for the specified <code>id</code> and <code>year</code> combinations in the <code>Queries</code> table. By matching records from <code>NPV</code> to <code>Queries</code>, users can retrieve the NPV for specific projects and years, supporting financial analysis and decision-making processes related to project investments.</p> <p>The primary keys and the structured insertion of data ensure that the information is well-organized, making it straightforward to perform efficient and accurate data retrieval operations based on the requirements set forth in potential SQL queries.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q31-finding-npv-for-each-query","title":"Q31. Finding NPV for Each Query","text":"<p>This SQL command is designed to match each query in the <code>Queries</code> table with its corresponding net present value (NPV) in the <code>NPV</code> table, providing a default value of 0 if no NPV is found. This is crucial for financial analysis, where understanding the NPV associated with each query based on <code>id</code> and <code>year</code> is essential for evaluating the viability and success of projects.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-breakdown","title":"SQL Query Breakdown","text":"<pre><code>SELECT q.id, q.year, COALESCE(n.npv,0) AS npv\nFROM Queries q\nLEFT JOIN NPV n\nON q.id = n.id AND q.year=n.year;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#components","title":"Components","text":"<ul> <li> <p>SELECT Clause: This part of the query selects the <code>id</code> and <code>year</code> from the <code>Queries</code> table and uses the <code>COALESCE</code> function to select the <code>npv</code> from the <code>NPV</code> table. <code>COALESCE</code> is used here to handle cases where there might be no matching NPV record for a given query; in such cases, it defaults to <code>0</code>.</p> </li> <li> <p>FROM Clause: Indicates that the data is being selected from the <code>Queries</code> table, aliased as <code>q</code>.</p> </li> <li> <p>LEFT JOIN Clause: This joins the <code>Queries</code> table (<code>q</code>) with the <code>NPV</code> table (<code>n</code>) based on matching <code>id</code> and <code>year</code> columns. The LEFT JOIN ensures that all entries from the <code>Queries</code> table are included in the result set, even if there is no matching entry in the <code>NPV</code> table.</p> </li> <li> <p>ON Condition: Specifies the condition for the JOIN, which is that the <code>id</code> and <code>year</code> from both tables must match. This condition ensures that the correct NPV values are retrieved for each query based on both the <code>id</code> and <code>year</code>.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#expected-outcome_1","title":"Expected Outcome","text":"<p>The result of this query is a table that lists each query from the <code>Queries</code> table along with its corresponding NPV value from the <code>NPV</code> table. If a particular query does not have a matching NPV record, the NPV is shown as <code>0</code>. This allows users to quickly assess the NPV associated with various queries, facilitating financial analysis and project evaluation.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q32-displaying-unique-ids-for-each-employee","title":"Q32. Displaying Unique IDs for Each Employee","text":"<p>This SQL command aims to retrieve the <code>unique_id</code> for each employee from the <code>Employees</code> table. If an employee does not have a <code>unique_id</code> in the <code>EmployeeUNI</code> table, the query is designed to show <code>null</code> for their <code>unique_id</code>.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-breakdown_1","title":"SQL Query Breakdown","text":"<pre><code>SELECT unique_id, name\nFROM Employees\nLEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#components_1","title":"Components","text":"<ul> <li> <p>SELECT Clause: Selects the <code>unique_id</code> from the <code>EmployeeUNI</code> table and the <code>name</code> from the <code>Employees</code> table. The goal is to list every employee with their respective unique ID.</p> </li> <li> <p>FROM Clause: Indicates that the data is being selected from the <code>Employees</code> table, which contains all employee records.</p> </li> <li> <p>LEFT JOIN Clause: This joins the <code>Employees</code> table with the <code>EmployeeUNI</code> table based on the employee's <code>id</code>. The LEFT JOIN is used to ensure all employees are included in the result, even if they do not have a corresponding entry in the <code>EmployeeUNI</code> table.</p> </li> <li> <p>ON Condition: Specifies the condition for the JOIN. The condition <code>Employees.id = EmployeeUNI.id</code> ensures that the <code>unique_id</code> is matched to the correct employee based on their <code>id</code>.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#expected-outcome_2","title":"Expected Outcome","text":"<p>The result of this query is a list of all employees with their names and corresponding <code>unique_id</code>s. For employees who do not have a <code>unique_id</code> in the <code>EmployeeUNI</code> table, the output will show <code>null</code> for the <code>unique_id</code> field. This approach ensures that the query accurately reflects the presence or absence of a <code>unique_id</code> for every employee in the database, facilitating easy identification and record management.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q33-reporting-distance-travelled-by-each-user","title":"Q33. Reporting Distance Travelled by Each User","text":"<p>This SQL command is designed to report the total distance travelled by each user, ordering the results first by the travelled distance in descending order and then by the user's name in ascending order if there are ties in distance.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-breakdown_2","title":"SQL Query Breakdown","text":"<pre><code>SELECT name, SUM(IFNULL(distance, 0)) AS travelled_distance\nFROM Rides r\nRIGHT JOIN Users u ON r.user_id = u.id\nGROUP BY name\nORDER BY travelled_distance DESC, name ASC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#components_2","title":"Components","text":"<ul> <li> <p>SELECT Clause: Chooses the <code>name</code> of the user and calculates the total <code>travelled_distance</code> by summing up the <code>distance</code> column from the <code>Rides</code> table. The <code>IFNULL</code> function is used to treat <code>null</code> distances as <code>0</code>, ensuring that all users are included even if they haven't taken any rides.</p> </li> <li> <p>FROM and JOIN Clauses: The <code>Rides</code> table is joined with the <code>Users</code> table using a <code>RIGHT JOIN</code> based on the <code>user_id</code>. This ensures that all users are included in the results, regardless of whether they have corresponding entries in the <code>Rides</code> table.</p> </li> <li> <p>GROUP BY Clause: Groups the results by the user's name, which is necessary for calculating the sum of distances travelled by each user.</p> </li> <li> <p>ORDER BY Clause: Orders the results by <code>travelled_distance</code> in descending order to show the users who have travelled the most at the top. In case of ties in the travelled distance, users are ordered by their name in ascending order, ensuring a consistent and understandable ordering of the results.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#expected-outcome_3","title":"Expected Outcome","text":"<p>The outcome of this query is a list of users along with the total distance they have travelled, sorted to highlight the most active users in terms of distance first. Users who have not taken any rides are still included in the report with a travelled distance of <code>0</code>, ensuring comprehensive coverage of all users. This query is particularly useful for analyzing user engagement and activity within a service that tracks distances travelled, such as a ride-sharing platform.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q34-identifying-products-with-at-least-100-units-ordered-in-february-2020","title":"Q34. Identifying Products with At Least 100 Units Ordered in February 2020","text":"<p>This SQL query is crafted to find products that achieved a minimum of 100 units ordered during February 2020, along with the total amount of units ordered for those products within that timeframe.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-explanation","title":"SQL Query Explanation","text":"<pre><code>SELECT a.product_name, SUM(unit) AS unit\nFROM Products a\nLEFT JOIN Orders b ON a.product_id = b.product_id\nWHERE b.order_date BETWEEN '2020-02-01' AND '2020-02-29'\nGROUP BY a.product_id\nHAVING SUM(unit) &gt;= 100;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#breakdown","title":"Breakdown","text":"<ul> <li> <p>SELECT Clause: Chooses the <code>product_name</code> from the <code>Products</code> table and calculates the total <code>unit</code> (amount) ordered for each product.</p> </li> <li> <p>FROM and JOIN Clauses: Initiates from the <code>Products</code> table (<code>a</code>) and performs a <code>LEFT JOIN</code> with the <code>Orders</code> table (<code>b</code>) on the <code>product_id</code>. This ensures that all products are considered, even if they haven't been ordered in February 2020.</p> </li> <li> <p>WHERE Clause: Filters orders to include only those that occurred within the specified date range of February 2020 (<code>'2020-02-01'</code> to <code>'2020-02-29'</code>).</p> </li> <li> <p>GROUP BY Clause: Groups the results by <code>product_id</code> to aggregate orders for each product.</p> </li> <li> <p>HAVING Clause: Applies a filter on the grouped result to include only those products where the sum of ordered units in February 2020 is at least 100.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome","title":"Intended Outcome","text":"<p>The result is a list of products that were ordered at least 100 units in February 2020, along with the total units ordered for those products. This query helps identify popular products within a specific timeframe, offering valuable insights for inventory management, marketing strategies, and sales analysis. It showcases the ability to analyze sales data and filter results based on aggregate functions and specific conditions.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q34-identifying-products-with-at-least-100-units-ordered-in-february-2020_1","title":"Q34. Identifying Products with At Least 100 Units Ordered in February 2020","text":"<p>This SQL query aims to find products that achieved at least 100 units ordered during February 2020, along with the total units ordered for those products.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_10","title":"SQL Query","text":"<pre><code>SELECT a.product_name, SUM(unit) AS unit\nFROM Products a\nLEFT JOIN Orders b ON a.product_id = b.product_id\nWHERE b.order_date BETWEEN '2020-02-01' AND '2020-02-29'\nGROUP BY a.product_id\nHAVING SUM(unit) &gt;= 100;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_14","title":"Explanation","text":"<ul> <li> <p>FROM Products a: The query begins by selecting from the <code>Products</code> table, aliasing it as <code>a</code>.</p> </li> <li> <p>LEFT JOIN Orders b ON a.product_id = b.product_id: It then performs a left join with the <code>Orders</code> table (aliased as <code>b</code>), matching rows based on the <code>product_id</code>. This join ensures all products are considered, even those without orders, although the <code>HAVING</code> clause will later filter these out.</p> </li> <li> <p>WHERE b.order_date BETWEEN '2020-02-01' AND '2020-02-29': This condition filters the orders to include only those placed in February 2020.</p> </li> <li> <p>GROUP BY a.product_id: The query groups the results by <code>product_id</code> to aggregate orders for each product.</p> </li> <li> <p>HAVING SUM(unit) &gt;= 100: After grouping, this clause filters the groups to include only those where the sum of ordered units is at least 100. This step is crucial for identifying products that met the order threshold within the specified timeframe.</p> </li> <li> <p>SELECT a.product_name, SUM(unit) AS unit: Finally, the query selects the product name and the total units ordered for each product meeting the criteria.</p> </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_1","title":"Intended Outcome","text":"<p>The query returns a list of products that had at least 100 units ordered during February 2020, along with the total number of units ordered for these products. This information can be useful for inventory management, sales analysis, and understanding product demand during specific periods.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q35-finding-the-most-active-user-and-the-highest-rated-movie-in-february-2020","title":"Q35. Finding the Most Active User and the Highest Rated Movie in February 2020","text":"<p>This query involves two parts: 1. Identifying the user who has rated the most movies. 2. Finding the movie with the highest average rating in February 2020.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_11","title":"SQL Query","text":"<pre><code>SELECT user_name AS results FROM\n(\n    SELECT a.name AS user_name, COUNT(*) AS counts \n    FROM MovieRating AS b\n    JOIN Users AS a ON a.user_id = b.user_id\n    GROUP BY b.user_id\n    ORDER BY counts DESC, user_name ASC LIMIT 1\n) first_query\nUNION\nSELECT movie_name AS results FROM\n(\n    SELECT c.title AS movie_name, AVG(d.rating) AS rate \n    FROM MovieRating AS d\n    JOIN Movies AS c ON c.movie_id = d.movie_id\n    WHERE SUBSTR(d.created_at, 1, 7) = '2020-02'\n    GROUP BY d.movie_id\n    ORDER BY rate DESC, movie_name ASC LIMIT 1\n) second_query;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_15","title":"Explanation","text":"<ul> <li>First Query (Most Active User):</li> <li>Joins the <code>MovieRating</code> and <code>Users</code> tables to correlate user IDs with names.</li> <li>Groups the results by <code>user_id</code> to count the number of movies each user has rated.</li> <li> <p>Orders the result in descending order of the count (to get the highest first) and then by user name alphabetically, using <code>LIMIT 1</code> to fetch the top result.</p> </li> <li> <p>Second Query (Highest Rated Movie in February 2020):</p> </li> <li>Joins the <code>MovieRating</code> and <code>Movies</code> tables to match movie IDs with titles.</li> <li>Filters ratings created in February 2020.</li> <li>Groups the results by <code>movie_id</code> and calculates the average rating for each movie.</li> <li> <p>Orders the result in descending order of average rating (to get the highest first) and then by movie title alphabetically, using <code>LIMIT 1</code> to select the top result.</p> </li> <li> <p>UNION:</p> </li> <li>Combines the results of the two queries into a single list. The use of <code>UNION</code> ensures any duplicate entries are eliminated, though in this context, duplicates are unlikely due to the nature of the queries.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_2","title":"Intended Outcome","text":"<p>The query outputs two rows: 1. The name of the user who has rated the most movies. In the event of a tie, the lexicographically smallest name is returned. 2. The title of the movie with the highest average rating in February 2020. If there's a tie in average ratings, the lexicographically smallest movie title is chosen.</p> <p>This approach allows for a comprehensive analysis of user engagement and movie popularity within a specific timeframe, providing valuable insights for content and marketing strategies.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q36-report-the-distance-travelled-by-each-user","title":"Q36. Report the Distance Travelled by Each User","text":"<p>This query aims to calculate the total distance travelled by each user based on the records in the <code>Rides</code> table and sort the results first by the distance in descending order and then by user names in ascending order in case of distance ties.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_12","title":"SQL Query","text":"<pre><code>SELECT name, SUM(IFNULL(distance, 0)) AS travelled_distance\nFROM Rides r\nRIGHT JOIN Users u ON r.user_id = u.id\nGROUP BY name\nORDER BY travelled_distance DESC, name ASC;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_16","title":"Explanation","text":"<ul> <li><code>RIGHT JOIN Users u ON r.user_id = u.id</code>:</li> <li> <p>Joins the <code>Users</code> table with the <code>Rides</code> table based on the <code>user_id</code>. The right join ensures that all users are included in the result set, even if they have not taken any rides (which would be relevant if a user has no corresponding entry in the <code>Rides</code> table).</p> </li> <li> <p><code>SUM(IFNULL(distance, 0)) AS travelled_distance</code>:</p> </li> <li> <p>Calculates the total distance travelled by each user. The <code>IFNULL</code> function is used to treat any null distances as 0, ensuring that users without rides are included with a distance of 0.</p> </li> <li> <p><code>GROUP BY name</code>:</p> </li> <li> <p>Groups the results by the user's name to aggregate distances at the user level.</p> </li> <li> <p><code>ORDER BY travelled_distance DESC, name ASC</code>:</p> </li> <li>Orders the result first by the calculated total distance in descending order, so users who have travelled the most are listed first. If two or more users have travelled the same distance, those users are then ordered by their name in ascending alphabetical order to break the ties.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_3","title":"Intended Outcome","text":"<p>The query generates a list of users and the total distance they have travelled based on the records in the <code>Rides</code> table. Users who have not participated in any rides are also included with a distance of 0. This comprehensive overview allows for a detailed analysis of user engagement with the service, potentially informing business decisions related to user incentives, engagement strategies, or targeted marketing campaigns.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q37-show-the-unique-id-of-each-user","title":"Q37. Show the Unique ID of Each User","text":"<p>This query aims to display the unique ID assigned to each employee from the <code>EmployeeUNI</code> table alongside their names. For employees who do not have a unique ID, the query is designed to show <code>null</code> for the unique ID value.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_13","title":"SQL Query","text":"<pre><code>SELECT unique_id, name\nFROM Employees\nLEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#correction-to-the-query","title":"Correction to the Query","text":"<p>The provided SQL query syntax attempting to use an <code>IF</code> condition in the <code>ON</code> clause is not standard SQL practice. To achieve the desired result, a direct <code>LEFT JOIN</code> should be used without the <code>IF</code> condition, as corrected below:</p> <pre><code>SELECT Employees.id, EmployeeUNI.unique_id, Employees.name\nFROM Employees\nLEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_17","title":"Explanation","text":"<ul> <li><code>LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id</code>:</li> <li> <p>Performs a left outer join between the <code>Employees</code> and <code>EmployeeUNI</code> tables based on the employee ID. This join ensures all employees are listed, including those without a corresponding unique ID in the <code>EmployeeUNI</code> table.</p> </li> <li> <p><code>SELECT Employees.id, EmployeeUNI.unique_id, Employees.name</code>:</p> </li> <li>Selects the employee ID and name from the <code>Employees</code> table and the unique ID from the <code>EmployeeUNI</code> table. If an employee does not have a unique ID (i.e., there is no matching entry in <code>EmployeeUNI</code>), the <code>unique_id</code> field in the result set will show as <code>null</code>.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_4","title":"Intended Outcome","text":"<p>The corrected query generates a list of all employees, displaying their unique ID where available. For employees not present in the <code>EmployeeUNI</code> table, the unique ID column will display as <code>null</code>. This result set effectively captures both employees with and without a unique ID, providing a comprehensive view of employee identifiers across the organization.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q38-find-students-enrolled-in-non-existent-departments","title":"Q38. Find Students Enrolled in Non-existent Departments","text":"<p>This query aims to identify students enrolled in departments that are not listed in the <code>Departments</code> table, effectively pointing out data inconsistencies or changes in departmental structures.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_14","title":"SQL Query","text":"<pre><code>SELECT s.id, s.name\nFROM Students s\nLEFT JOIN Departments d ON s.department_id = d.id\nWHERE d.id IS NULL;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_18","title":"Explanation","text":"<ul> <li><code>LEFT JOIN Departments d ON s.department_id = d.id</code>:</li> <li> <p>This part of the query performs a left join between the <code>Students</code> table (<code>s</code>) and the <code>Departments</code> table (<code>d</code>). The join condition is based on the <code>department_id</code> of the student matching the <code>id</code> of the department. This join ensures all students are included in the result, even if their <code>department_id</code> does not match any <code>id</code> in the <code>Departments</code> table.</p> </li> <li> <p><code>SELECT s.id, s.name</code>:</p> </li> <li> <p>The query selects the ID and name of the students. These fields are fetched from the <code>Students</code> table (<code>s</code>).</p> </li> <li> <p><code>WHERE d.id IS NULL</code>:</p> </li> <li>This condition filters the results to include only those rows where there is no matching department ID in the <code>Departments</code> table. Since the left join includes all students, this condition effectively identifies students whose <code>department_id</code> does not have a corresponding entry in the <code>Departments</code> table, implying these students are enrolled in departments that no longer exist or were never listed.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_5","title":"Intended Outcome","text":"<p>The result set produced by this query includes the IDs and names of students enrolled in departments that are either obsolete or were erroneously entered into the system without a corresponding department record. This can help educational institutions identify and correct discrepancies in their enrollment records or departmental structures.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q39-report-calls-between-distinct-persons","title":"Q39. Report Calls Between Distinct Persons","text":"<p>This query focuses on summarizing the call activities recorded in the <code>Calls</code> table, specifically reporting on the number of calls and the total duration of calls between each pair of distinct individuals, ensuring the first person's ID is numerically less than the second person's ID.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_15","title":"SQL Query","text":"<pre><code>SELECT LEAST(from_id, to_id) AS person1,\n       GREATEST(from_id, to_id) AS person2,\n       COUNT(*) AS call_count,\n       SUM(duration) AS total_duration\nFROM Calls\nGROUP BY person1, person2;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_19","title":"Explanation","text":"<ul> <li><code>LEAST(from_id, to_id) AS person1</code>:</li> <li> <p>This function selects the smaller of the two IDs (<code>from_id</code> and <code>to_id</code>) as <code>person1</code>, ensuring that <code>person1</code> is always numerically less than <code>person2</code>. This approach standardizes the pair ordering and avoids duplicating pairs in reversed roles.</p> </li> <li> <p><code>GREATEST(from_id, to_id) AS person2</code>:</p> </li> <li> <p>Similarly, this function selects the larger ID as <code>person2</code>, complementing the <code>LEAST</code> function to enforce a consistent ordering in the reporting of call pairs.</p> </li> <li> <p><code>COUNT(*) AS call_count</code>:</p> </li> <li> <p>This part of the query counts the total number of calls made between each distinct pair of individuals.</p> </li> <li> <p><code>SUM(duration) AS total_duration</code>:</p> </li> <li> <p>Sums up the total duration of all calls made between each pair, giving insight into the cumulative time spent in conversations.</p> </li> <li> <p><code>GROUP BY person1, person2</code>:</p> </li> <li>This clause groups the results based on the computed <code>person1</code> and <code>person2</code> values, ensuring that the call counts and durations are summarized for each unique pair of individuals.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#intended-outcome_6","title":"Intended Outcome","text":"<p>The query produces a table where each row represents a unique pair of individuals who have communicated through calls. For each pair, the table displays:</p> <ul> <li><code>person1</code> and <code>person2</code>: The IDs of the individuals in the pair, with <code>person1</code>'s ID being less than <code>person2</code>'s ID.</li> <li><code>call_count</code>: The total number of calls that occurred between the pair.</li> <li><code>total_duration</code>: The cumulative duration of all calls between the pair.</li> </ul> <p>This output helps in analyzing communication patterns, such as identifying the most frequently contacted pairs and understanding the distribution of call durations among different pairs.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-database-operations-a-comprehensive-guide","title":"SQL Database Operations: A Comprehensive Guide","text":"<p>In this guide, we'll explore various SQL database operations, including creating databases and tables, inserting and selecting data, modifying table structures, enforcing data integrity through constraints, and more. Each operation will be explained with SQL examples for a practical understanding.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#creating-and-selecting-from-tables","title":"Creating and Selecting from Tables","text":""},{"location":"SQL/Assignments/SQL/Sample.html#creating-a-database","title":"Creating a Database","text":"<p>To start, we create a database named <code>class2_db</code>. This serves as the container for our tables and data.</p> <pre><code>CREATE DATABASE class2_db;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#selecting-a-database","title":"Selecting a Database","text":"<p>Before performing operations, we select our newly created database.</p> <pre><code>USE class2_db;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#creating-the-employee-table","title":"Creating the Employee Table","text":"<p>We create an <code>employee</code> table to store employee details. Initially, it includes columns for an ID, name, address, and city.</p> <pre><code>CREATE TABLE IF NOT EXISTS employee(\n    id INT,\n    name VARCHAR(50),\n    address VARCHAR(50),\n    city VARCHAR(50)\n);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#inserting-data","title":"Inserting Data","text":"<p>Insert a record into the <code>employee</code> table. This adds an employee with ID 1, named Shashank, residing in RJPM, Lucknow.</p> <pre><code>INSERT INTO employee VALUES(1, 'Shashank', 'RJPM', 'Lucknow');\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#selecting-data","title":"Selecting Data","text":"<p>Retrieve and display all records from the <code>employee</code> table to verify our insert operation.</p> <pre><code>SELECT * FROM employee;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#modifying-table-structure-and-data-integrity","title":"Modifying Table Structure and Data Integrity","text":""},{"location":"SQL/Assignments/SQL/Sample.html#adding-a-new-column","title":"Adding a New Column","text":"<p>We realize the need to store employees' dates of birth (DOB), so we add a <code>DOB</code> column.</p> <pre><code>ALTER TABLE employee ADD DOB date;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#modifying-column-specifications","title":"Modifying Column Specifications","text":"<p>To accommodate longer names, we modify the <code>name</code> column to allow up to 100 characters.</p> <pre><code>ALTER TABLE employee MODIFY COLUMN name VARCHAR(100);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#removing-a-column","title":"Removing a Column","text":"<p>We decide that the <code>city</code> column is no longer needed and remove it from the table.</p> <pre><code>ALTER TABLE employee DROP COLUMN city;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#renaming-a-column","title":"Renaming a Column","text":"<p>To make the <code>name</code> column's purpose clearer, we rename it to <code>full_name</code>.</p> <pre><code>ALTER TABLE employee RENAME COLUMN name TO full_name;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#enforcing-data-integrity","title":"Enforcing Data Integrity","text":""},{"location":"SQL/Assignments/SQL/Sample.html#adding-a-unique-constraint","title":"Adding a Unique Constraint","text":"<p>To ensure each employee has a unique ID, we add a unique constraint to the <code>id</code> column.</p> <pre><code>ALTER TABLE employee ADD CONSTRAINT id_unique UNIQUE(id);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#removing-constraints","title":"Removing Constraints","text":"<p>If the unique constraint on <code>id</code> is no longer needed, we can remove it.</p> <pre><code>ALTER TABLE employee DROP CONSTRAINT id_unique;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#primary-key-and-foreign-key-demonstrations","title":"Primary Key and Foreign Key Demonstrations","text":""},{"location":"SQL/Assignments/SQL/Sample.html#creating-a-table-with-a-primary-key","title":"Creating a Table with a Primary Key","text":"<p>We create a <code>persons</code> table, ensuring each person has a unique <code>id</code> through a primary key constraint.</p> <pre><code>CREATE TABLE persons\n(\n    id INT, \n    name VARCHAR(50), \n    age INT,\n    CONSTRAINT pk PRIMARY KEY (id) \n);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#demonstrating-foreign-key-usage","title":"Demonstrating Foreign Key Usage","text":"<p>To illustrate relationships between tables, we create <code>customer</code> and <code>orders</code> tables. Orders are linked to customers through a foreign key constraint.</p> <pre><code>CREATE TABLE customer\n(\n    cust_id INT,\n    name VARCHAR(50), \n    age INT,\n    CONSTRAINT pk PRIMARY KEY (cust_id) \n);\n\nCREATE TABLE orders\n(\n    order_id INT,\n    order_num INT,\n    customer_id INT,\n    CONSTRAINT pk PRIMARY KEY (order_id),\n    CONSTRAINT fk FOREIGN KEY (customer_id) REFERENCES customer(cust_id)\n);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#data-manipulation-and-analysis","title":"Data Manipulation and Analysis","text":""},{"location":"SQL/Assignments/SQL/Sample.html#updating-data","title":"Updating Data","text":"<p>We can update records, such as increasing each employee's salary by 20%.</p> <pre><code>UPDATE employee SET salary = salary + salary * 0.2;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#deleting-data","title":"Deleting Data","text":"<p>If certain records are no longer needed, like employees who joined on a specific date, we can remove them.</p> <pre><code>DELETE FROM employee WHERE hiring_date = '2021-08-10';\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#filtering-and-sorting-data","title":"Filtering and Sorting Data","text":"<p>SQL provides powerful tools for querying and analyzing data. For instance, we can find employees who joined within a specific date range or those earning within a certain salary range.</p> <pre><code>-- Find employees who joined between August 5, 2021, and August 11, 2021.\nSELECT * FROM employee WHERE hiring_date BETWEEN '2021-08-05' AND '2021-08-11';\n\n-- Find employees earning between 10,000 and 28,000.\nSELECT * FROM employee WHERE salary BETWEEN 10000 AND 28000;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#using-like-for-pattern-matching","title":"Using <code>LIKE</code> for Pattern Matching","text":"<p>The <code>LIKE</code> clause allows for flexible string matching, such as finding employees whose names start with 'S' or end with 'l'.</p> <pre><code>-- Names starting with 'S'\nSELECT * FROM employee WHERE name LIKE 'S%';\n\n-- Names ending with 'l'\nSELECT\n\n * FROM employee WHERE name LIKE '%l';\n</code></pre> <p>This guide provides a foundational understanding of managing databases with SQL, from creating and modifying tables to querying and analyzing data with a focus on syntax and practical examples.</p> <p>The given SQL script sets up a scenario involving two tables: <code>Warehouse</code> and <code>Products</code>. The <code>Warehouse</code> table tracks the number of units of various products stored in different warehouses, while the <code>Products</code> table contains information about each product, including its dimensions (Width, Length, Height).</p> <p>The final query aims to calculate the total volume occupied by the inventory in each warehouse. It does this by multiplying the units of each product stored in the warehouse by the volume of the product (calculated as Width * Length * Height from the <code>Products</code> table) and then summing this volume for each warehouse.</p> <p>Let's break down the query step by step:</p> <ol> <li> <p>Create Warehouse Table: This step creates a <code>Warehouse</code> table with columns for the warehouse name, product ID, and units of product stored. It also sets a composite primary key on the <code>name</code> and <code>product_id</code> columns.</p> <pre><code>CREATE TABLE IF NOT EXISTS Warehouse\n(\n    name VARCHAR(50),\n    product_id INT,\n    units INT,\n    CONSTRAINT pk PRIMARY KEY (name, product_id)\n);\n</code></pre> </li> <li> <p>Insert Data into Warehouse: This inserts data into the <code>Warehouse</code> table, representing the quantity of different products stored in each warehouse.</p> <pre><code>INSERT INTO Warehouse VALUES\n('LCHouse1', 1, 1), ('LCHouse1', 2, 10), ('LCHouse1', 3, 5), ('LCHouse2', 1, 2), ('LCHouse2', 2, 2), ('LCHouse3', 4, 1);\n</code></pre> </li> <li> <p>Create Products Table: Creates a <code>Products</code> table with columns for product ID, product name, and dimensions (Width, Length, Height), with <code>product_id</code> as the primary key.</p> <pre><code>CREATE TABLE IF NOT EXISTS Products\n(\n    product_id INT,\n    product_name VARCHAR(50),\n    Width INT,\n    Length INT,\n    Height INT,\n    CONSTRAINT pk PRIMARY KEY (product_id)\n);\n</code></pre> </li> <li> <p>Insert Data into Products: Inserts data into the <code>Products</code> table, representing various products and their dimensions.</p> <pre><code>INSERT INTO Products VALUES\n(1, 'LC-TV', 5, 50, 40), (2, 'LC-KeyChain', 5, 5, 5), (3, 'LC-Phone', 2, 10, 10), (4, 'LC-T-Shirt', 4, 10, 20);\n</code></pre> </li> <li> <p>Calculate Inventory Volume: The final query calculates the total volume occupied by the inventory in each warehouse by joining the <code>Warehouse</code> and <code>Products</code> tables on <code>product_id</code> and multiplying the units of each product by its volume. The results are grouped by warehouse name.</p> <pre><code>SELECT name AS warehouse_name, SUM(units * vol) AS volume\nFROM Warehouse w\nJOIN (SELECT product_id, Width * Length * Height AS vol FROM Products) p ON w.product_id = p.product_id\nGROUP BY name;\n</code></pre> </li> </ol> <p>In this query, the subquery <code>(SELECT product_id, Width * Length * Height AS vol FROM Products)</code> calculates the volume of each product by multiplying its dimensions. The main query then joins this subquery with the <code>Warehouse</code> table to calculate the total volume occupied by each type of product in the warehouses, ultimately summing these volumes by warehouse.</p> <p>This SQL script and the final query provide valuable insights into inventory management, specifically how much space products occupy in storage facilities, allowing for efficient space utilization and planning.</p> <p>The SQL query provided aims to calculate the daily difference in the number of apples and oranges sold, based on data from the <code>Sales</code> table. The <code>Sales</code> table includes columns for the sale date, type of fruit (as an enum of \"apples\" or \"oranges\"), and the number of units sold.</p> <p>Here's a breakdown of how the query works:</p> <ol> <li> <p>Create Sales Table: A table named <code>Sales</code> is created with columns for the sale date, fruit type (enumerated as \"apples\" or \"oranges\"), and the number of units sold. A primary key constraint is applied on the combination of <code>sale_date</code> and <code>fruit</code>.</p> <pre><code>CREATE TABLE IF NOT EXISTS Sales\n(\n    sale_date DATE,\n    fruit ENUM(\"apples\",\"oranges\"),\n    sold_num INT,\n    CONSTRAINT pk PRIMARY KEY (sale_date, fruit)\n);\n</code></pre> </li> <li> <p>Insert Data: Inserts records into the <code>Sales</code> table for both apples and oranges sold across different dates.</p> <pre><code>INSERT INTO Sales VALUES\n('2020-05-01', 'apples', 10),\n('2020-05-01', 'oranges', 8),\n('2020-05-02', 'apples', 15),\n('2020-05-02', 'oranges', 15),\n('2020-05-03', 'apples', 20),\n('2020-05-03', 'oranges', 0),\n('2020-05-04', 'apples', 15),\n('2020-05-04', 'oranges', 16);\n</code></pre> </li> <li> <p>Query for Daily Difference: The query calculates the daily difference in the number of apples and oranges sold. It uses a self-join on the <code>Sales</code> table to pair records of apples sold with records of oranges sold on the same date. Then, it computes the difference between the number of apples and oranges sold for each day.</p> <pre><code>SELECT a.sale_date, (a.sold_num - b.sold_num) AS diff\nFROM Sales a LEFT JOIN Sales b\nON a.sale_date = b.sale_date AND b.fruit = 'oranges'\nWHERE a.fruit = 'apples';\n</code></pre> </li> <li> <p>Order by Sale Date: The results are ordered by the <code>sale_date</code> to provide a chronological view of the differences in sales.</p> </li> </ol> <p>This query is specifically designed to compare the sales of two types of fruits, apples, and oranges, on a day-to-day basis. The self-join technique is essential here to align the sales data for apples with that for oranges based on the sale date. The filtering conditions within the <code>WHERE</code> clause and the <code>ON</code> clause of the join ensure that each record of apples is paired with the corresponding record of oranges from the same day, allowing for the calculation of the difference in units sold.</p> <p>Q43 The provided SQL query aims to calculate the fraction of players in the <code>Activity</code> table who logged in again the day after their first login, with the result rounded to two decimal places. This calculation is intended to assess player retention over a very short term, specifically looking at consecutive day activity following the initial login.</p> <p>However, there's a critical issue in the provided query related to the <code>DATEDIFF</code> function usage, which would result in not getting the expected outcome due to an incorrect calculation of the difference between dates. Let's address this and outline a corrected version of the query.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#original-table-and-data-insertion","title":"Original Table and Data Insertion","text":"<ol> <li> <p>Create Activity Table: A table named <code>Activity</code> is created with columns for <code>player_id</code>, <code>device_id</code>, <code>event_date</code>, and <code>games_played</code>, with a primary key constraint on <code>player_id</code> and <code>event_date</code>.</p> <pre><code>CREATE TABLE IF NOT EXISTS Activity\n(\n    player_id INT,\n    device_id INT,\n    event_date DATE,\n    games_played INT,\n    CONSTRAINT pk PRIMARY KEY (player_id, event_date)\n);\n</code></pre> </li> <li> <p>Insert Data: Sample data is inserted into the <code>Activity</code> table to represent different players' activity on various dates.</p> <pre><code>INSERT INTO Activity VALUES\n(1, 2, '2016-03-01', 5), (1, 2, '2016-03-02', 6),\n(2, 3, '2017-06-25', 1), (3, 1, '2016-03-02', 0),\n(3, 4, '2018-07-03', 5);\n</code></pre> </li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#corrected-query-for-calculating-player-retention-fraction","title":"Corrected Query for Calculating Player Retention Fraction","text":"<p>The intention is to first identify each player's first login date and then determine if they logged in again the following day. Finally, we calculate the fraction of these players relative to the total distinct player count. The provided query has a logical issue in calculating the day after the first login; let's revise it:</p> <pre><code>WITH FirstLogins AS (\n    SELECT\n        player_id,\n        MIN(event_date) AS first_login_date\n    FROM\n        Activity\n    GROUP BY\n        player_id\n),\nConsecutiveLogins AS (\n    SELECT\n        F.player_id\n    FROM\n        FirstLogins F\n        JOIN Activity A ON F.player_id = A.player_id AND A.event_date = DATE_ADD(F.first_login_date, INTERVAL 1 DAY)\n    GROUP BY\n        F.player_id\n)\nSELECT\n    ROUND((COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity)), 2) AS fraction\nFROM\n    ConsecutiveLogins;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_20","title":"Explanation:","text":"<ul> <li>FirstLogins CTE (Common Table Expression): Calculates the first login date for each player.</li> <li>ConsecutiveLogins CTE: Joins <code>FirstLogins</code> with <code>Activity</code> to find players who logged in again exactly one day after their first login. It uses <code>DATE_ADD</code> to find the next day after the first login.</li> <li>Final Selection: Calculates the fraction of players who logged in on consecutive days starting from their first login day, divided by the total number of distinct players in the dataset. This is rounded to two decimal places as required.</li> </ul> <p>This revised query should accurately calculate the desired metric of player retention over two consecutive days, providing insight into initial player engagement and retention for the given dataset.</p> <p>Q44 The SQL query in question aims to identify managers in the <code>Employee</code> table who have at least five direct reports. The <code>Employee</code> table includes columns for the employee's ID, name, department, and their manager's ID (<code>managerId</code>). Employees without a manager have <code>null</code> in the <code>managerId</code> column. Here's a detailed explanation of the query and the process to identify such managers:</p>"},{"location":"SQL/Assignments/SQL/Sample.html#original-table-and-data-insertion_1","title":"Original Table and Data Insertion","text":"<p>First, an <code>Employee</code> table is created with the necessary columns, and sample data is inserted to reflect a mix of employees and their respective managers.</p> <pre><code>CREATE TABLE IF NOT EXISTS Employee\n(\n    id INT,\n    name VARCHAR(50),\n    department VARCHAR(50),\n    managerId INT DEFAULT NULL,\n    CONSTRAINT pk PRIMARY KEY (id)\n);\n\nINSERT INTO Employee VALUES\n(101, 'John', 'A', NULL),\n(102, 'Dan', 'A', 101),\n(103, 'James', 'A', 101),\n(104, 'Amy', 'A', 101),\n(105, 'Anne', 'A', 101),\n(106, 'Ron', 'B', 101);\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query-to-find-managers-with-at-least-five-direct-reports","title":"SQL Query to Find Managers with At Least Five Direct Reports","text":"<p>The goal is to report managers who have at least five direct reports. Two approaches are provided to achieve this:</p>"},{"location":"SQL/Assignments/SQL/Sample.html#approach-1-using-join","title":"Approach 1: Using JOIN","text":"<pre><code>SELECT a.name\nFROM Employee a\nINNER JOIN Employee b ON a.id = b.managerId\nGROUP BY a.name\nHAVING COUNT(DISTINCT b.id) &gt;= 5;\n</code></pre> <ul> <li>Explanation: This query performs a self-join on the <code>Employee</code> table, linking each employee with their direct reports (where <code>a</code> represents managers and <code>b</code> represents their reports, linked by <code>a.id = b.managerId</code>). It then groups the results by the manager's name and filters for those groups having five or more distinct employee IDs under their management.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#approach-2-using-where-in-with-subquery","title":"Approach 2: Using WHERE IN with Subquery","text":"<pre><code>SELECT Name\nFROM Employee\nWHERE Id IN\n(\n    SELECT ManagerId\n    FROM Employee\n    GROUP BY ManagerId\n    HAVING COUNT(*) &gt;= 5\n);\n</code></pre> <ul> <li>Explanation: This approach uses a subquery to select <code>ManagerId</code>s that appear at least five times in the <code>Employee</code> table (indicating at least five direct reports). The outer query then selects the names of employees (managers) whose IDs match those <code>ManagerId</code>s found in the subquery. This method directly filters for managers based on the count of their reports.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#summary","title":"Summary","text":"<p>Both queries effectively identify managers with at least five direct reports by leveraging SQL's grouping and filtering capabilities. The first approach uses a self-join to compare records within the same table, while the second approach uses a subquery to isolate manager IDs meeting the criteria before retrieving their names. Both methods are valid and demonstrate different techniques for achieving the same result in SQL.</p> <p>Q45 The given SQL query aims to provide a report that lists all departments from the <code>Department</code> table, along with the count of students majoring in each department, as found in the <code>Student</code> table. It is designed to include departments even if they have no students currently, by using a <code>LEFT JOIN</code> to ensure all departments are included in the output regardless of whether there's a matching record in the <code>Student</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#breakdown-of-the-query","title":"Breakdown of the Query","text":""},{"location":"SQL/Assignments/SQL/Sample.html#tables-and-data-insertion","title":"Tables and Data Insertion","text":"<ol> <li> <p>Create Department Table: A table to store department information, including <code>dept_id</code> and <code>dept_name</code>.</p> <pre><code>CREATE TABLE IF NOT EXISTS Department\n(\n    dept_id INT,\n    dept_name VARCHAR(50),\n    CONSTRAINT pk PRIMARY KEY (dept_id)\n);\n\nINSERT INTO Department VALUES\n(1, 'Engineering'), (2, 'Science'), (3, 'Law');\n</code></pre> </li> <li> <p>Create Student Table: A table to store student information, including their <code>student_id</code>, <code>student_name</code>, <code>gender</code>, and <code>dept_id</code> which is a foreign key referencing <code>dept_id</code> in the <code>Department</code> table.</p> <pre><code>CREATE TABLE IF NOT EXISTS Student\n(\n    student_id INT,\n    student_name VARCHAR(50),\n    gender VARCHAR(50),\n    dept_id INT,\n    CONSTRAINT pk PRIMARY KEY (student_id),\n    CONSTRAINT fk FOREIGN KEY (dept_id) REFERENCES Department(dept_id)\n);\n\nINSERT INTO Student VALUES\n(1, 'Jack', 'M', 1), (2, 'Jane', 'F', 1), (3, 'Mark', 'M', 2);\n</code></pre> </li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#query-for-reporting-department-name-and-student-count","title":"Query for Reporting Department Name and Student Count","text":"<p>The query reports each department's name alongside the count of students majoring in that department, ensuring departments with no students are also included by using a <code>LEFT JOIN</code>.</p> <pre><code>SELECT\n    a.dept_name,\n    COALESCE(COUNT(b.student_id), 0) AS student_number\nFROM\n    Department a\nLEFT JOIN Student b ON a.dept_id = b.dept_id\nGROUP BY a.dept_name\nORDER BY student_number DESC, a.dept_name ASC;\n</code></pre> <ul> <li>LEFT JOIN: Ensures that all departments are included in the result, even if there are no matching records in the <code>Student</code> table.</li> <li>COALESCE: Used to return 0 for departments that have no students (where the <code>COUNT</code> might otherwise return <code>NULL</code>).</li> <li>GROUP BY: Groups the results by <code>dept_name</code>, which is necessary for the <code>COUNT</code> to calculate the number of students per department.</li> <li>ORDER BY: Orders the results first by the count of students in descending order (to show departments with the most students first) and then by <code>dept_name</code> in ascending order (to alphabetically order departments with the same number of students).</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#summary_1","title":"Summary","text":"<p>This query effectively reports on the distribution of students across departments, including those without any students, providing a comprehensive overview of the academic interests within the institution. The ordering of the results prioritizes departments with higher student numbers, while ensuring alphabetical ordering amongst departments with equal student counts, facilitating easy readability and analysis.</p> <p>Q45 The given SQL query aims to provide a report that lists all departments from the <code>Department</code> table, along with the count of students majoring in each department, as found in the <code>Student</code> table. It is designed to include departments even if they have no students currently, by using a <code>LEFT JOIN</code> to ensure all departments are included in the output regardless of whether there's a matching record in the <code>Student</code> table.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#breakdown-of-the-query_1","title":"Breakdown of the Query","text":""},{"location":"SQL/Assignments/SQL/Sample.html#tables-and-data-insertion_1","title":"Tables and Data Insertion","text":"<ol> <li> <p>Create Department Table: A table to store department information, including <code>dept_id</code> and <code>dept_name</code>.</p> <pre><code>CREATE TABLE IF NOT EXISTS Department\n(\n    dept_id INT,\n    dept_name VARCHAR(50),\n    CONSTRAINT pk PRIMARY KEY (dept_id)\n);\n\nINSERT INTO Department VALUES\n(1, 'Engineering'), (2, 'Science'), (3, 'Law');\n</code></pre> </li> <li> <p>Create Student Table: A table to store student information, including their <code>student_id</code>, <code>student_name</code>, <code>gender</code>, and <code>dept_id</code> which is a foreign key referencing <code>dept_id</code> in the <code>Department</code> table.</p> <pre><code>CREATE TABLE IF NOT EXISTS Student\n(\n    student_id INT,\n    student_name VARCHAR(50),\n    gender VARCHAR(50),\n    dept_id INT,\n    CONSTRAINT pk PRIMARY KEY (student_id),\n    CONSTRAINT fk FOREIGN KEY (dept_id) REFERENCES Department(dept_id)\n);\n\nINSERT INTO Student VALUES\n(1, 'Jack', 'M', 1), (2, 'Jane', 'F', 1), (3, 'Mark', 'M', 2);\n</code></pre> </li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#query-for-reporting-department-name-and-student-count_1","title":"Query for Reporting Department Name and Student Count","text":"<p>The query reports each department's name alongside the count of students majoring in that department, ensuring departments with no students are also included by using a <code>LEFT JOIN</code>.</p> <pre><code>SELECT\n    a.dept_name,\n    COALESCE(COUNT(b.student_id), 0) AS student_number\nFROM\n    Department a\nLEFT JOIN Student b ON a.dept_id = b.dept_id\nGROUP BY a.dept_name\nORDER BY student_number DESC, a.dept_name ASC;\n</code></pre> <ul> <li>LEFT JOIN: Ensures that all departments are included in the result, even if there are no matching records in the <code>Student</code> table.</li> <li>COALESCE: Used to return 0 for departments that have no students (where the <code>COUNT</code> might otherwise return <code>NULL</code>).</li> <li>GROUP BY: Groups the results by <code>dept_name</code>, which is necessary for the <code>COUNT</code> to calculate the number of students per department.</li> <li>ORDER BY: Orders the results first by the count of students in descending order (to show departments with the most students first) and then by <code>dept_name</code> in ascending order (to alphabetically order departments with the same number of students).</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#summary_2","title":"Summary","text":"<p>This query effectively reports on the distribution of students across departments, including those without any students, providing a comprehensive overview of the academic interests within the institution. The ordering of the results prioritizes departments with higher student numbers, while ensuring alphabetical ordering amongst departments with equal student counts, facilitating easy readability and analysis.</p> <p>Q46 The SQL query provided is designed to find customer IDs from the <code>Customer</code> table who have purchased all the products listed in the <code>Product</code> table. This type of query is particularly useful in scenarios where you need to identify customers who have shown a wide interest in the product range, possibly for targeted marketing or rewards programs.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#how-the-query-works","title":"How the Query Works","text":""},{"location":"SQL/Assignments/SQL/Sample.html#tables-and-data-insertion_2","title":"Tables and Data Insertion","text":"<ol> <li> <p>Create Product Table: A table to store unique product keys.</p> <pre><code>CREATE TABLE IF NOT EXISTS Product\n(\n    product_key INT,\n    CONSTRAINT pk PRIMARY KEY (product_key)\n);\n\nINSERT INTO Product VALUES (5), (6);\n</code></pre> </li> <li> <p>Create Customer Table: A table to store customer purchases, linking customer IDs to the product keys of the items they've bought. A foreign key constraint ensures that all product keys in the <code>Customer</code> table match those in the <code>Product</code> table.</p> <pre><code>CREATE TABLE IF NOT EXISTS Customer\n(\n    customer_id INT,\n    product_key INT,\n    CONSTRAINT fk FOREIGN KEY (product_key) REFERENCES Product(product_key)\n);\n\nINSERT INTO Customer VALUES (1, 5), (2, 6), (3, 5), (3, 6), (1, 6);\n</code></pre> </li> </ol>"},{"location":"SQL/Assignments/SQL/Sample.html#query-for-finding-customers-who-bought-all-products","title":"Query for Finding Customers Who Bought All Products","text":"<pre><code>SELECT\n    customer_id\nFROM customer\nGROUP BY customer_id\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM product);\n</code></pre> <ul> <li>GROUP BY <code>customer_id</code>: This groups all purchases in the <code>Customer</code> table by customer ID, which is necessary for aggregating purchases on a per-customer basis.</li> <li>HAVING COUNT(DISTINCT product_key): The <code>HAVING</code> clause filters these groups to include only those where the count of distinct <code>product_key</code> values matches the total number of products in the <code>Product</code> table. Using <code>DISTINCT</code> ensures that repeated purchases of the same product by a single customer don't skew the count.</li> <li>(SELECT COUNT(*) FROM product): This subquery calculates the total number of distinct products available, providing a dynamic value to compare against each customer's distinct product purchase count. </li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#summary_3","title":"Summary","text":"<p>The query efficiently identifies customers who have purchased every product listed in the <code>Product</code> table by comparing the unique count of products each customer has bought against the total product count. This approach ensures that the analysis remains accurate and flexible, accommodating any changes in the product range or customer purchase behavior over time.</p> <p>Q47 ### Q47: Most Experienced Employees in Each Project</p> <p>The given SQL query is designed to identify the most experienced employees for each project. It uses window functions, specifically <code>DENSE_RANK()</code>, to rank employees based on their years of experience within each project. Employees with the most experience are given a rank of 1, and in cases of a tie, all tied employees are included.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_21","title":"Explanation","text":"<ul> <li>Employee Table: Contains employee details including their ID, name, and years of experience.</li> <li>Project Table: Records which employees are assigned to which projects, with a many-to-many relationship facilitated by a composite primary key on <code>project_id</code> and <code>employee_id</code>.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#sql-query_16","title":"SQL Query","text":"<pre><code>SELECT\n    project_id,\n    employee_id\nFROM (\n    SELECT\n        p.project_id,\n        p.employee_id,\n        DENSE_RANK() OVER (PARTITION BY p.project_id ORDER BY e.experience_years DESC) AS rnk\n    FROM Project AS p\n    JOIN Employee AS e ON p.employee_id = e.employee_id\n) x\nWHERE rnk = 1;\n</code></pre> <ul> <li>Window Function (<code>DENSE_RANK()</code>): The <code>DENSE_RANK()</code> function is applied to assign ranks to employees based on their experience years, descending. This ranking is done within partitions of each <code>project_id</code>, ensuring that the ranking is specific to each project.</li> <li>Subquery: The inner query selects <code>project_id</code>, <code>employee_id</code>, and calculates the rank (<code>rnk</code>) of each employee within their project based on experience. The <code>JOIN</code> operation combines <code>Project</code> and <code>Employee</code> table data to access the experience years.</li> <li>Outer Query: Filters the results of the subquery to include only those records where the rank is 1, indicating the most experienced employee(s) for each project.</li> </ul>"},{"location":"SQL/Assignments/SQL/Sample.html#q48-books-and-orders-tables","title":"Q48: Books and Orders Tables","text":"<p>You've provided the schema for the <code>Books</code> and <code>Orders</code> tables without a specific query to address. The <code>Books</code> table contains details about books, including a unique ID, name, and availability date. The <code>Orders</code> table tracks orders placed for these books, including order ID, book ID, quantity of books ordered, and dispatch date. Each book can be associated with multiple orders, establishing a one-to-many relationship from <code>Books</code> to <code>Orders</code>.</p> <p>If you have a specific question or type of analysis you'd like to perform with these tables, such as finding the most ordered book, analyzing book order trends over time, or anything else, please provide more details.</p> <p>Q48: Books Sold Less Than 10 Copies Last Year The provided SQL query aims to identify books that sold less than 10 copies in the last year, excluding those that have been available for less than one month from a hypothetical today's date of 2019-06-23. The approach combines information from both the Books and Orders tables through a JOIN and uses conditions to filter based on the available_from and dispatch_date criteria.</p> <p>Explanation of the Query The query uses two main filters:</p> <p>Books available for more than a month by 2019-06-23: It ensures that only books available before 2019-05-23 are considered, giving each book at least a month of availability as of the hypothetical current date.</p> <p>Sales within the last year: It checks that the dispatch_date of orders falls between 2018-06-23 and 2019-06-23 to focus on the last year's sales.</p> <p>Furthermore, it uses a UNION to include books that meet the availability criteria but have not been ordered in the last year.</p> <p>Corrected SQL Query sql Copy code SELECT b.book_id, b.name  FROM Books b LEFT JOIN Orders o ON b.book_id = o.book_id AND o.dispatch_date BETWEEN '2018-06-23' AND '2019-06-23' WHERE b.available_from &lt; '2019-05-23' GROUP BY b.book_id HAVING SUM(o.quantity) &lt; 10 OR SUM(o.quantity) IS NULL; This query ensures that all books available for more than a month as of 2019-05-23 are considered, including those not ordered in the last year (SUM(o.quantity) IS NULL accounts for books with no orders). It checks orders within the specified period and sums quantities to filter out books selling 10 or more copies.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q48-books-sold-less-than-10-copies-last-year","title":"Q48: Books Sold Less Than 10 Copies Last Year","text":"<p>The provided SQL query aims to identify books that sold less than 10 copies in the last year, excluding those that have been available for less than one month from a hypothetical today's date of 2019-06-23. The approach combines information from both the <code>Books</code> and <code>Orders</code> tables through a <code>JOIN</code> and uses conditions to filter based on the <code>available_from</code> and <code>dispatch_date</code> criteria.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation-of-the-query","title":"Explanation of the Query","text":"<p>The query uses two main filters:</p> <ol> <li> <p>Books available for more than a month by 2019-06-23: It ensures that only books available before 2019-05-23 are considered, giving each book at least a month of availability as of the hypothetical current date.</p> </li> <li> <p>Sales within the last year: It checks that the <code>dispatch_date</code> of orders falls between 2018-06-23 and 2019-06-23 to focus on the last year's sales.</p> </li> </ol> <p>Furthermore, it uses a <code>UNION</code> to include books that meet the availability criteria but have not been ordered in the last year.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#corrected-sql-query","title":"Corrected SQL Query","text":"<pre><code>SELECT b.book_id, b.name \nFROM Books b\nLEFT JOIN Orders o ON b.book_id = o.book_id AND o.dispatch_date BETWEEN '2018-06-23' AND '2019-06-23'\nWHERE b.available_from &lt; '2019-05-23'\nGROUP BY b.book_id\nHAVING SUM(o.quantity) &lt; 10 OR SUM(o.quantity) IS NULL;\n</code></pre> <p>This query ensures that all books available for more than a month as of 2019-05-23 are considered, including those not ordered in the last year (<code>SUM(o.quantity) IS NULL</code> accounts for books with no orders). It checks orders within the specified period and sums quantities to filter out books selling 10 or more copies.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q49-highest-grade-and-course-per-student","title":"Q49: Highest Grade and Course per Student","text":"<p>The provided SQL query for Q49 is nearly correct but missed the crucial part of ordering by <code>course_id</code> in case of a tie in grades. Here\u2019s the refined version:</p> <pre><code>SELECT e.student_id, e.course_id, e.grade\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY student_id ORDER BY grade DESC, course_id ASC) AS rn\n    FROM Enrollments\n) e\nWHERE e.rn = 1\nORDER BY e.student_id ASC;\n</code></pre> <p>This query ensures that for each student, the highest grade and the corresponding course (with the smallest <code>course_id</code> in case of a tie) are selected. The <code>ROW_NUMBER()</code> function assigns a unique row number for each student based on the descending order of grades and ascending order of <code>course_id</code>, ensuring that ties are resolved by the course with the smallest ID. The outer query then filters these results to only include the top-ranked course and grade per student.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#q50-winner-in-each-group","title":"Q50: Winner in Each Group","text":"<p>The objective here is to find the winner in each group based on the total scores accumulated from the matches. However, the provided query might not work as intended due to syntax and logical errors, especially in the handling of the case when scores are being summed and the subsequent grouping by <code>group_id</code>.</p> <p>Here's a corrected and optimized version:</p> <pre><code>WITH PlayerScores AS (\n    SELECT\n        p.group_id,\n        p.player_id,\n        SUM(\n            CASE\n                WHEN p.player_id = m.first_player THEN m.first_score\n                WHEN p.player_id = m.second_player THEN m.second_score\n            END\n        ) AS totalScores\n    FROM\n        Players p\n        LEFT JOIN Matches m ON p.player_id = m.first_player OR p.player_id = m.second_player\n    GROUP BY\n        p.group_id, p.player_id\n),\nRankedScores AS (\n    SELECT\n        group_id,\n        player_id,\n        totalScores,\n        RANK() OVER(PARTITION BY group_id ORDER BY totalScores DESC, player_id) AS rank\n    FROM\n        PlayerScores\n)\nSELECT\n    group_id,\n    player_id\nFROM\n    RankedScores\nWHERE\n    rank = 1\nORDER BY\n    group_id, totalScores DESC, player_id;\n</code></pre>"},{"location":"SQL/Assignments/SQL/Sample.html#explanation_22","title":"Explanation:","text":"<ol> <li> <p>PlayerScores CTE: Calculates the total scores for each player across all matches, regardless of whether they were the first or second player in a match. It uses conditional aggregation to sum scores correctly based on player position in the matches.</p> </li> <li> <p>RankedScores CTE: Applies the <code>RANK()</code> window function to assign ranks within each group based on the total scores in descending order. In case of a tie in scores, it defaults to the smaller <code>player_id</code> due to the <code>ORDER BY</code> clause.</p> </li> <li> <p>Final Selection: From the <code>RankedScores</code>, it selects the top-ranked player(s) in each group, effectively identifying the winner(s) based on the highest total scores. In the case of score ties, all tied players are included.</p> </li> </ol> <p>This approach addresses the complexities of summing scores from potentially multiple match roles (first or second player) and accurately determines group winners based on total scores.</p>"},{"location":"SQL/Assignments/SQL/Sample.html#references","title":"References","text":"<p>https://chat.openai.com/share/185aadc2-4e5f-4f17-8e01-c8c6e416a86e https://chat.openai.com/share/d0abecc4-807a-42ac-96dd-1f88b7f58bb1</p>"},{"location":"SQL/Exercises/Exercise1.html","title":"Exercise1","text":""},{"location":"SQL/Exercises/Exercise1.html#sql-commands","title":"SQL Commands","text":""},{"location":"SQL/Exercises/Exercise1.html#show-databases","title":"Show Databases","text":"<pre><code>SHOW DATABASES;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#create-database","title":"Create Database","text":"<pre><code>CREATE DATABASE noob_db;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#drop-database","title":"Drop Database","text":"<pre><code>DROP DATABASE first_demo;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#use-database","title":"Use Database","text":"<pre><code>USE noob_db;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#create-table","title":"Create Table","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee (\n    id INT,\n    emp_name VARCHAR(20)\n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#show-tables","title":"Show Tables","text":"<pre><code>SHOW TABLES;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#show-table-definition","title":"Show Table Definition","text":"<pre><code>SHOW CREATE TABLE employee;\n</code></pre> <p>The <code>SHOW CREATE TABLE</code> statement in SQL is a useful command that displays the <code>CREATE TABLE</code> statement that would create an exact copy of the existing table specified. This command is particularly handy when you want to understand how a table is structured, including its column definitions, data types, default values, and any constraints like primary keys, foreign keys, unique constraints, check constraints, and indexes associated with the table.</p>"},{"location":"SQL/Exercises/Exercise1.html#create-table-with-more-columns","title":"Create Table with More Columns","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_v1 (\n    id INT,\n    name VARCHAR(50),\n    salary DOUBLE, \n    hiring_date DATE \n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#insert-data-syntax-1","title":"Insert Data Syntax 1","text":"<pre><code>INSERT INTO employee_v1 VALUES(1, 'Shashank', 1000, '2021-09-15');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#insert-data-syntax-2","title":"Insert Data Syntax 2","text":"<pre><code>INSERT INTO employee_v1(salary, name, id) VALUES(2000, 'Rahul', 2);\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#insert-multiple-records","title":"Insert Multiple Records","text":"<pre><code>INSERT INTO employee_v1 VALUES\n    (3, 'Amit', 5000, '2021-10-28'),\n    (4, 'Nitin', 3500, '2021-09-16'),\n    (5, 'Kajal', 4000, '2021-09-20');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#fetch-data-from-table","title":"Fetch Data from Table","text":"<pre><code>SELECT * FROM employee_v1;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#table-with-integrity-constraints","title":"Table with Integrity Constraints","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_with_constraints (\n    id INT,\n    name VARCHAR(50) NOT NULL,\n    salary DOUBLE, \n    hiring_date DATE DEFAULT '2021-01-01',\n    UNIQUE (id),\n    CHECK (salary &gt; 1000)\n);\n</code></pre> <ul> <li>Column-level constraints are defined immediately after the column definition. This includes <code>NOT NULL</code> and <code>DEFAULT</code> values, which are attributes of individual columns.</li> <li>Table-level constraints are defined after all columns have been defined. Examples include <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, and <code>CHECK</code> constraints that might span multiple columns.</li> </ul>"},{"location":"SQL/Exercises/Exercise1.html#integrity-constraint-failure-1","title":"Integrity Constraint Failure 1","text":"<pre><code>-- Exception: Column 'name' cannot be null\nINSERT INTO employee_with_constraints VALUES(1, null, 3000, '2021-11-20');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#correct-record-for-integrity-constraint-1","title":"Correct Record for Integrity Constraint 1","text":"<pre><code>INSERT INTO employee_with_constraints VALUES(1, 'Shashank', 3000, '2021-11-20');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#integrity-constraint-failure-2","title":"Integrity Constraint Failure 2","text":"<pre><code>-- Exception: Duplicate entry '1' for key 'employee_with_constraints.id'\nINSERT INTO employee_with_constraints VALUES(1, 'Rahul', 5000, '2021-10-23');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#correct-record-for-unique-constraint","title":"Correct Record for Unique Constraint","text":"<pre><code>-- Unique can accept NULL\nINSERT INTO employee_with_constraints VALUES(null, 'Rahul', 5000, '2021-10-23');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#integrity-constraint-failure-3","title":"Integrity Constraint Failure 3","text":"<pre><code>-- Exception: Duplicate entry NULL for key 'employee_with_constraints.id'\nINSERT INTO employee_with_constraints VALUES(null, 'Rajat', 2000, '2020-09-20');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#integrity-constraint-failure-4","title":"Integrity Constraint Failure 4","text":"<pre><code>-- Exception: Check constraint 'employee_with_constraints_chk_1' is violated\nINSERT INTO employee_with_constraints VALUES(5, 'Amit', 500, '2023-10-24');\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#test-default-date-constraint","title":"Test Default Date Constraint","text":"<pre><code>-- Test for Default Date Constraint\nINSERT INTO employee_with_constraints(id, name, salary) VALUES(7, 'Neeraj', 3000);\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#select-data-from-table-with-constraints","title":"Select Data from Table with Constraints","text":"<pre><code>SELECT * FROM employee_with_constraints;\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#table-with-constraints-alternate-syntax","title":"Table with Constraints (Alternate Syntax)","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_with_constraints_tmp (\n    id INT,\n    name VARCHAR(50) NOT NULL,\n    salary DOUBLE, \n    hiring_date DATE DEFAULT '2021-01-01',\n    CONSTRAINT unique_emp_id UNIQUE (id),\n    CONSTRAINT salary_check CHECK (salary &gt; 1000)\n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise1.html#check-constraint-failure-with-name","title":"Check Constraint Failure with Name","text":"<pre><code>-- Exception: Check constraint 'salary_check' is violated\nINSERT INTO employee_with_constraints_tmp VALUES(5, 'Amit', 500, '2023-10-24');\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html","title":"Exercise2","text":""},{"location":"SQL/Exercises/Exercise2.html#exercise2","title":"Exercise2","text":"<p>In this guide, we'll explore various SQL database operations, including creating databases and tables, inserting and selecting data, modifying table structures, enforcing data integrity through constraints, and more. Each operation will be explained with SQL examples for a practical understanding.</p>"},{"location":"SQL/Exercises/Exercise2.html#creating-and-selecting-from-tables","title":"Creating and Selecting from Tables","text":""},{"location":"SQL/Exercises/Exercise2.html#creating-a-database","title":"Creating a Database","text":"<p>To start, we create a database named <code>class2_db</code>. This serves as the container for our tables and data.</p> <pre><code>CREATE DATABASE class2_db;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#selecting-a-database","title":"Selecting a Database","text":"<p>Before performing operations, we select our newly created database.</p> <pre><code>USE class2_db;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#creating-the-employee-table","title":"Creating the Employee Table","text":"<p>We create an <code>employee</code> table to store employee details. Initially, it includes columns for an ID, name, address, and city.</p> <pre><code>CREATE TABLE IF NOT EXISTS employee(\n    id INT,\n    name VARCHAR(50),\n    address VARCHAR(50),\n    city VARCHAR(50)\n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#inserting-data","title":"Inserting Data","text":"<p>Insert a record into the <code>employee</code> table. This adds an employee with ID 1, named Shashank, residing in RJPM, Lucknow.</p> <pre><code>INSERT INTO employee VALUES(1, 'Shashank', 'RJPM', 'Lucknow');\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#selecting-data","title":"Selecting Data","text":"<p>Retrieve and display all records from the <code>employee</code> table to verify our insert operation.</p> <pre><code>SELECT * FROM employee;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#modifying-table-structure-and-data-integrity","title":"Modifying Table Structure and Data Integrity","text":""},{"location":"SQL/Exercises/Exercise2.html#adding-a-new-column","title":"Adding a New Column","text":"<p>We realize the need to store employees' dates of birth (DOB), so we add a <code>DOB</code> column.</p> <pre><code>ALTER TABLE employee ADD DOB date;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#modifying-column-specifications","title":"Modifying Column Specifications","text":"<p>To accommodate longer names, we modify the <code>name</code> column to allow up to 100 characters.</p> <pre><code>ALTER TABLE employee MODIFY COLUMN name VARCHAR(100);\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#removing-a-column","title":"Removing a Column","text":"<p>We decide that the <code>city</code> column is no longer needed and remove it from the table.</p> <pre><code>ALTER TABLE employee DROP COLUMN city;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#renaming-a-column","title":"Renaming a Column","text":"<p>To make the <code>name</code> column's purpose clearer, we rename it to <code>full_name</code>.</p> <pre><code>ALTER TABLE employee RENAME COLUMN name TO full_name;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#enforcing-data-integrity","title":"Enforcing Data Integrity","text":""},{"location":"SQL/Exercises/Exercise2.html#adding-a-unique-constraint","title":"Adding a Unique Constraint","text":"<p>To ensure each employee has a unique ID, we add a unique constraint to the <code>id</code> column.</p> <pre><code>ALTER TABLE employee ADD CONSTRAINT id_unique UNIQUE(id);\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#removing-constraints","title":"Removing Constraints","text":"<p>If the unique constraint on <code>id</code> is no longer needed, we can remove it.</p> <pre><code>ALTER TABLE employee DROP CONSTRAINT id_unique;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#primary-key-and-foreign-key-demonstrations","title":"Primary Key and Foreign Key Demonstrations","text":""},{"location":"SQL/Exercises/Exercise2.html#creating-a-table-with-a-primary-key","title":"Creating a Table with a Primary Key","text":"<p>We create a <code>persons</code> table, ensuring each person has a unique <code>id</code> through a primary key constraint.</p> <pre><code>CREATE TABLE persons\n(\n    id INT, \n    name VARCHAR(50), \n    age INT,\n    CONSTRAINT pk PRIMARY KEY (id) \n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#demonstrating-foreign-key-usage","title":"Demonstrating Foreign Key Usage","text":"<p>To illustrate relationships between tables, we create <code>customer</code> and <code>orders</code> tables. Orders are linked to customers through a foreign key constraint.</p> <pre><code>CREATE TABLE customer\n(\n    cust_id INT,\n    name VARCHAR(50), \n    age INT,\n    CONSTRAINT pk PRIMARY KEY (cust_id) \n);\n\nCREATE TABLE orders\n(\n    order_id INT,\n    order_num INT,\n    customer_id INT,\n    CONSTRAINT pk PRIMARY KEY (order_id),\n    CONSTRAINT fk FOREIGN KEY (customer_id) REFERENCES customer(cust_id)\n);\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#data-manipulation-and-analysis","title":"Data Manipulation and Analysis","text":""},{"location":"SQL/Exercises/Exercise2.html#updating-data","title":"Updating Data","text":"<p>We can update records, such as increasing each employee's salary by 20%.</p> <pre><code>UPDATE employee SET salary = salary + salary * 0.2;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#deleting-data","title":"Deleting Data","text":"<p>If certain records are no longer needed, like employees who joined on a specific date, we can remove them.</p> <pre><code>DELETE FROM employee WHERE hiring_date = '2021-08-10';\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#filtering-and-sorting-data","title":"Filtering and Sorting Data","text":"<p>SQL provides powerful tools for querying and analyzing data. For instance, we can find employees who joined within a specific date range or those earning within a certain salary range.</p> <pre><code>-- Find employees who joined between August 5, 2021, and August 11, 2021.\nSELECT * FROM employee WHERE hiring_date BETWEEN '2021-08-05' AND '2021-08-11';\n\n-- Find employees earning between 10,000 and 28,000.\nSELECT * FROM employee WHERE salary BETWEEN 10000 AND 28000;\n</code></pre>"},{"location":"SQL/Exercises/Exercise2.html#using-like-for-pattern-matching","title":"Using <code>LIKE</code> for Pattern Matching","text":"<p>The <code>LIKE</code> clause allows for flexible string matching, such as finding employees whose names start with 'S' or end with 'l'.</p> <pre><code>-- Names starting with 'S'\nSELECT * FROM employee WHERE name LIKE 'S%';\n\n-- Names ending with 'l'\nSELECT\n\n * FROM employee WHERE name LIKE '%l';\n</code></pre> <p>This guide provides a foundational understanding of managing databases with SQL, from creating and modifying tables to querying and analyzing data with a focus on syntax and practical examples.</p>"},{"location":"SQL/Exercises/Exercise3.html","title":"Exercise 3","text":""},{"location":"SQL/Exercises/Exercise3.html#exercise-3","title":"Exercise 3","text":"<p>Below is a comprehensive explanation of the SQL concepts and queries discussed, covering key SQL functionalities such as filtering, grouping, concatenating, subqueries, joins, and the use of the <code>HAVING</code> clause.</p>"},{"location":"SQL/Exercises/Exercise3.html#comprehensive-sql-guide","title":"Comprehensive SQL Guide","text":""},{"location":"SQL/Exercises/Exercise3.html#1-filtering-with-is-null-and-is-not-null","title":"1. Filtering with <code>IS NULL</code> and <code>IS NOT NULL</code>","text":"<p>In SQL, <code>IS NULL</code> and <code>IS NOT NULL</code> are used to filter rows based on whether a column's value is <code>NULL</code> or not. <code>NULL</code> represents a missing or unknown value in a database.</p> <pre><code>-- Filter employees with NULL age\nSELECT * FROM employee WHERE age IS NULL;\n\n-- Filter employees with non-NULL salary\nSELECT * FROM employee WHERE salary IS NOT NULL;\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#2-grouping-and-aggregate-functions","title":"2. Grouping and Aggregate Functions","text":"<p>The <code>GROUP BY</code> clause groups rows that have the same values in specified columns into summary rows. Aggregate functions like <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>AVG</code>, and <code>COUNT</code> are used to perform calculations on grouped data.</p> <pre><code>-- Calculate total orders placed by each country\nSELECT country, COUNT(*) AS order_count FROM orders_data GROUP BY country;\n\n-- Aggregate salary information by age group\nSELECT age, SUM(salary) AS total_salary, MAX(salary), MIN(salary), AVG(salary), COUNT(*) FROM employee GROUP BY age;\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#3-concatenating-grouped-data-with-group_concat","title":"3. Concatenating Grouped Data with <code>GROUP_CONCAT</code>","text":"<p><code>GROUP_CONCAT</code> function concatenates values from multiple rows into a single string for each group. You can specify a separator and control the order and distinctness of the concatenated values.</p> <pre><code>-- Concatenate distinct states for each country\nSELECT country, GROUP_CONCAT(DISTINCT state ORDER BY state DESC SEPARATOR ', ') AS states FROM orders_data GROUP BY country;\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#4-subqueries","title":"4. Subqueries","text":"<p>Subqueries are queries nested within another query. They can be used in various places including the <code>WHERE</code> clause, <code>FROM</code> clause, and <code>SELECT</code> clause, providing flexibility in forming complex queries.</p> <pre><code>-- Find employees earning more than Rohit\nSELECT * FROM employees WHERE salary &gt; (SELECT salary FROM employees WHERE name = 'Rohit');\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#5-using-in-and-not-in","title":"5. Using <code>IN</code> and <code>NOT IN</code>","text":"<p>The <code>IN</code> operator allows you to specify multiple values in a <code>WHERE</code> clause, filtering rows that match any of the values in the list. <code>NOT IN</code> does the opposite, excluding the listed values.</p> <pre><code>-- Find orders from specific states\nSELECT * FROM orders_data WHERE state IN ('Seattle', 'Goa');\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#6-joins","title":"6. Joins","text":"<p>Joins are used to combine rows from two or more tables based on a related column. Types of joins include <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code>.</p> <pre><code>-- Example of an INNER JOIN\nSELECT o.*, c.* FROM orders o INNER JOIN customers c ON o.cust_id = c.cust_id;\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#7-group-by-with-having-clause","title":"7. Group By with Having Clause","text":"<p>The <code>HAVING</code> clause is used to filter groups made by <code>GROUP BY</code> based on the result of aggregate functions. It's similar to <code>WHERE</code>, but for grouped data.</p> <pre><code>-- Find countries with exactly one order\nSELECT country FROM orders_data GROUP BY country HAVING COUNT(*) = 1;\n</code></pre>"},{"location":"SQL/Exercises/Exercise3.html#8-group_concat-for-concatenating-values","title":"8. <code>GROUP_CONCAT</code> for Concatenating Values","text":"<p>This function is useful for concatenating values from multiple rows into a single string within each group, optionally applying <code>DISTINCT</code>, ordering the results, and using a custom separator.</p> <pre><code>-- Concatenate distinct states for each country\nSELECT country, GROUP_CONCAT(DISTINCT state ORDER BY state DESC SEPARATOR ', ') FROM orders_data GROUP BY country;\n</code></pre> <p>These explanations provide a structured overview of fundamental and advanced SQL functionalities, demonstrating how to efficiently query and manipulate data in a relational database system.</p>"},{"location":"SQL/Exercises/Exercise4.html","title":"Exercise 4","text":""},{"location":"SQL/Exercises/Exercise4.html#exercise-4","title":"Exercise 4","text":"<p>Let's break down and explain the SQL concepts and examples you provided, from group rollup operations to window functions, including practical use cases like generating sequences and handling hierarchical data with Common Table Expressions (CTEs).</p>"},{"location":"SQL/Exercises/Exercise4.html#group-rollup","title":"Group Rollup","text":"<p>Purpose: Calculate total revenue per shop and year-wise revenue.</p> <p>Explanation: The <code>WITH ROLLUP</code> modifier is used in <code>GROUP BY</code> clauses to create subtotals and grand totals. It can aggregate data across multiple levels, producing a result set that includes rows representing higher-level summaries.</p>"},{"location":"SQL/Exercises/Exercise4.html#example-total-revenue-calculation","title":"Example: Total Revenue Calculation","text":"<pre><code>SELECT\n  SUM(payment_amount),\n  YEAR(payment_date) AS 'Payment Year',\n  store_id AS 'Store'\nFROM payment\nGROUP BY YEAR(payment_date), store_id WITH ROLLUP\nORDER BY YEAR(payment_date), store_id;\n</code></pre> This query calculates the total revenue for each store, broken down by year, and includes subtotals for each year and a grand total at the end."},{"location":"SQL/Exercises/Exercise4.html#any-and-all-operators","title":"ANY and ALL Operators","text":"<p>ANY: Compares a value to each value in a list or returned by a subquery. It returns true if any comparison is true.</p> <p>ALL: Similar to ANY but returns true only if all comparisons are true.</p>"},{"location":"SQL/Exercises/Exercise4.html#exists-and-not-exists","title":"EXISTS and NOT EXISTS","text":"<p>EXISTS: Checks if a subquery returns any rows. It's useful for conditional checks in queries.</p> <p>NOT EXISTS: The opposite of EXISTS. It checks if a subquery returns no rows.</p>"},{"location":"SQL/Exercises/Exercise4.html#window-functions","title":"Window Functions","text":"<p>Window functions perform calculations across sets of rows related to the current row. They are powerful tools for performing complex analytics tasks like running totals, moving averages, and rankings.</p>"},{"location":"SQL/Exercises/Exercise4.html#example-frame-clause-with-rows-between","title":"Example: Frame Clause with Rows BETWEEN","text":"<pre><code>SELECT *,\n       SUM(sales_amount) OVER (ORDER BY sales_date \n                               ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) \n       AS running_total\nFROM sales_data;\n</code></pre> This calculates the running total of sales, including the current row and the one preceding it."},{"location":"SQL/Exercises/Exercise4.html#common-table-expressions-ctes","title":"Common Table Expressions (CTEs)","text":"<p>CTEs provide a way to write more readable and maintainable queries by allowing you to define temporary result sets that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement.</p>"},{"location":"SQL/Exercises/Exercise4.html#recursive-ctes-for-hierarchical-data","title":"Recursive CTEs for Hierarchical Data","text":"<p>Recursive CTEs are used to deal with hierarchical data, like organizational structures or category trees.</p>"},{"location":"SQL/Exercises/Exercise4.html#example-generating-a-sequence-of-numbers","title":"Example: Generating a Sequence of Numbers","text":"<pre><code>WITH RECURSIVE number_sequence AS (\n  SELECT 1 AS number\n  UNION ALL\n  SELECT number + 1 FROM number_sequence WHERE number &lt; 10\n)\nSELECT * FROM number_sequence;\n</code></pre> This CTE generates a sequence of numbers from 1 to 10."},{"location":"SQL/Exercises/Exercise4.html#example-organizational-chart","title":"Example: Organizational Chart","text":"<pre><code>WITH RECURSIVE org_chart AS (\n  SELECT emp_id, emp_name, manager_id FROM employees WHERE manager_id IS NULL\n  UNION ALL\n  SELECT e.emp_id, e.emp_name, e.manager_id FROM employees e INNER JOIN org_chart oc ON e.manager_id = oc.emp_id\n)\nSELECT * FROM org_chart;\n</code></pre> This builds an organizational chart by recursively querying employees based on their manager's relationship."},{"location":"SQL/Exercises/Exercise4.html#practical-examples","title":"Practical Examples","text":"<p>The provided SQL snippets demonstrate various operations, from data manipulation and aggregation to advanced analytics with window functions and recursive queries for hierarchical data modeling. By leveraging these techniques, you can perform complex data analysis tasks, generate reports, and extract meaningful insights from your data sets.</p> <p>The above explanations provide a foundation for understanding the SQL concepts and practices you've outlined, with each section explaining the purpose and application of different SQL features and operations.</p>"},{"location":"SQL/Exercises/Exercise4.html#sql-concepts-and-examples-explained","title":"SQL Concepts and Examples Explained","text":""},{"location":"SQL/Exercises/Exercise4.html#group-rollup_1","title":"Group Rollup","text":"<p>Group Rollup is used to aggregate data across multiple levels of grouped data in a single query. It allows us to create subtotals and grand totals within the result set.</p>"},{"location":"SQL/Exercises/Exercise4.html#example-queries","title":"Example Queries","text":"<ul> <li>Calculate total revenue of each shop per year.</li> <li>Calculate total revenue per year across all shops.</li> </ul>"},{"location":"SQL/Exercises/Exercise4.html#any-and-all-operations","title":"ANY and ALL Operations","text":"<p>These operations compare a value to each value in a list or returned by a subquery. - <code>ANY</code> returns true if any comparison is true. - <code>ALL</code> returns true only if all comparisons are true.</p>"},{"location":"SQL/Exercises/Exercise4.html#exists-and-not-exists-operations","title":"EXISTS and NOT EXISTS Operations","text":"<p><code>EXISTS</code> and <code>NOT EXISTS</code> are used in subqueries to test for the existence of rows in a subquery. - <code>EXISTS</code> returns true if the subquery returns one or more records. - <code>NOT EXISTS</code> returns true if the subquery returns no records.</p>"},{"location":"SQL/Exercises/Exercise4.html#window-functions_1","title":"Window Functions","text":"<p>Window functions perform calculations across a set of rows related to the current row without collapsing groups. Examples include running totals, rankings, and partitioned averages.</p>"},{"location":"SQL/Exercises/Exercise4.html#frame-clause-rows-between","title":"Frame Clause - Rows BETWEEN","text":"<p>The <code>ROWS BETWEEN</code> clause in window functions defines the range of rows used to perform the calculations for the current row.</p>"},{"location":"SQL/Exercises/Exercise4.html#common-table-expressions-ctes_1","title":"Common Table Expressions (CTEs)","text":"<p>CTEs offer a way to create temporary result sets that are usable within the execution scope of a single statement. They are useful for organizing complex queries and improving readability.</p>"},{"location":"SQL/Exercises/Exercise4.html#generating-numbers-using-with-recursive","title":"Generating Numbers Using WITH RECURSIVE","text":"<p><code>WITH RECURSIVE</code> is used to generate a sequence of numbers by recursively querying the temporary result set created by the CTE.</p>"},{"location":"SQL/Exercises/Exercise4.html#organizational-chart-using-recursive-ctes","title":"Organizational Chart Using Recursive CTEs","text":"<p>Recursive CTEs can represent hierarchical relationships, such as organizational charts, by recursively referring to itself to build a hierarchy tree.</p>"},{"location":"SQL/Exercises/Exercise4.html#examples","title":"Examples","text":"<p>The given SQL snippets illustrate the application of the discussed concepts in creating tables, inserting data, and writing queries that utilize group rollup, window functions, CTEs, and other SQL features to analyze and retrieve data efficiently.</p>"},{"location":"SQL/Interview%20Questions/interview%20Questions.html","title":"SQL Interview Questions","text":""},{"location":"SQL/Interview%20Questions/interview%20Questions.html#sql-interview-questions","title":"SQL Interview Questions","text":""}]}